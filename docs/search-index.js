var searchIndex = JSON.parse('{\
"halo2_base":{"doc":"Base library to build Halo2 circuits.","t":[3,13,3,3,13,4,17,13,13,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,2,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,12,11,11,11,11,11,12,12,12,12,12,2,2,2,2,0,0,0,12,4,3,3,3,13,3,13,6,13,3,3,3,6,11,5,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,5,11,11,11,11,12,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,3,3,8,4,17,13,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,10,11,10,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,10,11,11,10,11,11,10,11,12,12,10,11,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,16,3,3,8,4,13,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,12,12,11,11,11,11,11,11,11,11,10,11,11,12,11,12,12,10,11,11,12,11,12,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,18,18,2,2,2,2,2,2,2,6,6,3,3,6,6,6,6,6,6,2,18,18,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,25,8,8,10,5,5,5,5,5,5,5,5,5,5,5,11,0,11,5,5,5,0,10,10,5,5,5,5,5,5],"n":["AssignedValue","Constant","Context","ContextCell","Existing","QuantumCell","SKIP_FIRST_PASS","Witness","WitnessFraction","advice","advice_equality_constraints","assign_cell","assign_region","assign_region_last","assign_region_smart","assign_witnesses","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cell","cells_to_lookup","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","constant_equality_constraints","constrain_equal","context_id","context_id","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from","gates","get","halo2_proofs","init","init","init","init","into","into","into","into","last","load_constant","load_witness","load_zero","new","offset","safe_types","selector","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","utils","value","value","value","vzip","vzip","vzip","vzip","witness_gen_only","zero_cell","0","0","0","0","GateChip","GateInstructions","RangeChip","RangeInstructions","builder","flex_gate","range","0","CircuitBuilderStage","FlexGateConfigParams","GateCircuitBuilder","GateThreadBuilder","Keygen","KeygenAssignments","Mock","MultiPhaseThreadBreakPoints","Prover","RangeCircuitBuilder","RangeWithInstanceCircuitBuilder","RangeWithInstanceConfig","ThreadBreakPoints","assign_all","assign_threads_in","assigned_advices","assigned_constants","assigned_instances","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","break_points","break_points","break_points","builder","circuit","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","config","config","configure","configure","configure","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get_new_thread_id","init","init","init","init","init","init","init","init","instance","instance","instance_count","into","into","into","into","into","into","into","into","k","keygen","keygen","keygen","keygen","main","mock","mock","mock","mock","new","new","new_thread","num_advice_per_phase","num_fixed","num_lookup_advice_per_phase","parallelize_in","prover","prover","prover","prover","range","serialize","strategy","sub_synthesize","synthesize","synthesize","synthesize","thread_count","threads","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unknown","use_unknown","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","without_witnesses","without_witnesses","without_witnesses","witness_gen_only","witness_gen_only","BasicGateConfig","FlexGateConfig","GateChip","GateInstructions","GateStrategy","MAX_PHASE","Vertical","accumulated_product","add","and","assert_bit","assert_is_const","basic_gates","bits_to_indicator","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","configure","configure","const_left_rotate_unsafe","const_left_rotate_unsafe","const_right_rotate_unsafe","const_right_rotate_unsafe","constants","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","div_unsafe","drop","drop","drop","drop","eq","field_element_cache","fmt","fmt","fmt","fmt","from","from","from","from","get_field_element","get_field_element","idx_to_indicator","init","init","init","init","inner_product","inner_product","inner_product_left_last","inner_product_left_last","inner_product_with_sums","inner_product_with_sums","into","into","into","into","is_equal","is_zero","lagrange_and_eval","max_rows","mul","mul_add","mul_not","neg","new","not","num_advice","num_to_bits","num_to_bits","or","or_and","or_and","partial_sums","pow_of_two","pow_of_two","pow_of_two","q_enable","select","select","select_by_indicator","select_from_idx","serialize","strategy","strategy","sub","sum","sum_products_with_coeff_and_var","sum_products_with_coeff_and_var","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","value","vzip","vzip","vzip","vzip","xor","Gate","RangeChip","RangeConfig","RangeInstructions","RangeStrategy","Vertical","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check_big_less_than_safe","check_less_than","check_less_than","check_less_than_safe","clone","clone","clone","clone_into","clone_into","clone_into","configure","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","div_mod","div_mod_var","drop","drop","drop","eq","fmt","fmt","fmt","from","from","from","gate","gate","gate","gate","get_last_bit","init","init","init","into","into","into","is_big_less_than_safe","is_less_than","is_less_than","is_less_than_safe","limb_bases","load_lookup_table","lookup","lookup_advice","lookup_bits","lookup_bits","lookup_bits","lookup_bits","new","q_lookup","range_check","range_check","strategy","strategy","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","AssignedValue","BITS_PER_ELE","BYTES_PER_ELE","Constant","Context","Existing","GateInstructions","QuantumCell","RangeChip","RangeInstructions","SafeBool","SafeBytes32","SafeType","SafeTypeChip","SafeUint128","SafeUint16","SafeUint256","SafeUint32","SafeUint64","SafeUint8","ScalarField","TOTAL_BITS","VALUE_LENGTH","Witness","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","fmt","from","from","init","init","into","into","new","raw_bytes_to","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","value","vzip","vzip","BigPrimeField","CurveAffineExt","ScalarField","batch_add","bigint_to_fe","biguint_to_fe","bit_length","compose","decompose","decompose_bigint","decompose_bigint_option","decompose_biguint","decompose_fe_to_u64_limbs","fe_to_bigint","fe_to_biguint","from_bytes_le","fs","into_coordinates","log2_ceil","modulus","power_of_two","testing","to_bytes_le","to_u64_limbs","value_to_option","gen_srs","read_or_create_srs","read_params","check_proof","gen_proof"],"q":["halo2_base","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","halo2_base::QuantumCell","","","","halo2_base::gates","","","","","","","halo2_base::gates::builderhalo2_base::gates::flex_gate","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","halo2_base::gates::range","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","halo2_base::safe_types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","halo2_base::utils","","","","","","","","","","","","","","","","","","","","","","","","","halo2_base::utils::fs","","","halo2_base::utils::testing",""],"d":["Pointer containing cell value and location within Context.","A known constant value added as a witness value to the …","Represents a single thread of an execution trace.","Pointer to the position of a cell at <code>offset</code> in an advice …","An AssignedValue already existing in the advice column …","Convenience Enum which abstracts the scenarios under a …","Constant representing whether the Layouter calls <code>synthesize</code>…","A non-existing witness ScalarField value (e.g. private …","A non-existing witness ScalarField marked as a fraction …","Single column of advice cells.","A Vec tracking equality constraints between pairs of …","Pushes a QuantumCell to the end of the <code>advice</code> column (Vec …","Pushes multiple advice cells to the <code>advice</code> column of …","Pushes multiple advice cells to the <code>advice</code> column of …","Pushes multiple advice cells to the <code>advice</code> column of …","Assigns a region of witness cells in an iterator and …","","","","","","","","","ContextCell pointer to the cell the value is assigned to …","Vec tracking all cells that lookup is enabled for.","","","","","","","","","A Vec tracking pairs equality constraints between Fixed …","Creates an equality constraint between two <code>advice</code> cells.","Identifier of the Context that this cell belongs to.","Identifier to reference cells from this Context.","","","","","","","","","","","","","","","","","Converts an AssignedValue into a QuantumCell of [type …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Module that contains the main API for creating and working …","Returns the AssignedValue of the cell at the given <code>offset</code> …","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the AssignedValue of the last cell in the <code>advice</code> …","Assigns a constant value and returns the corresponding …","Assigns a witness value and returns the corresponding …","Assigns the 0 value to a new cell or returns a previously …","Creates a new Context with the given <code>context_id</code> and …","Relative offset of the cell within this Context advice …","Module for SafeType which enforce value range and realted …","Vec representing the selector column of this Context …","","","","","","","","","","","","","","","","","Utility functions for converting between different types …","Returns an immutable reference to the underlying …","Returns an immutable reference to the underlying value of …","Value of the cell.","","","","","Returns the <code>witness_gen_only</code> flag of the Context","Cell that represents the zero value as AssignedValue","","","","","","","","","Module that helps auto-build circuits","Module implementing our simple custom gate and common …","Module using a single lookup table for range checks","","Defines stage of the circuit builder.","A Config struct defining the parameters for a FlexGate …","A wrapper struct to auto-build a circuit from a …","Builds the process for gate threading","Keygen phase","Stores the cell values loaded during the Keygen phase of a …","Mock Circuit","Vector of vectors tracking the thread break points across …","Prover Circuit","A wrapper struct to auto-build a circuit from a …","This is an extension of <code>RangeCircuitBuilder</code> that adds …","Configuration with <code>RangeConfig</code> and a single public …","Vector of thread advice column break points","Assigns all advice and fixed cells, turns on selectors, …","Assigns threads to regions of advice column.","Advice assignments","Constant assignments in Fixes Assignments","The assigned instances to expose publicly at the end of …","","","","","","","","","","","","","","","","","Gets the break points of the circuit.","Advice column break points for threads in each phase.","Break points for threads within the circuit","The Thread Builder for the circuit","The underlying circuit builder","","","","","","","","","","","","","","","","","Auto-calculates configuration parameters for the circuit","Calls <code>GateThreadBuilder::config</code>","Configures a new circuit using the parameters …","Configures a new circuit using the parameters …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new thread id by incrementing the <code>thread count</code>","","","","","","","","","Gets the instances.","The public instance column","Gets the number of instances.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Security parameter <code>k</code> used for the keygen.","Creates a new GateThreadBuilder with <code>witness_gen_only</code> set …","Creates a new GateCircuitBuilder with <code>use_unknown</code> of …","Creates an instance of the RangeCircuitBuilder and …","See <code>RangeCircuitBuilder::keygen</code>","Returns a mutable reference to the Context of a gate …","Creates a new GateThreadBuilder with <code>witness_gen_only</code> set …","Creates a new GateCircuitBuilder with <code>use_unknown</code> of …","Creates a mock instance of the RangeCircuitBuilder.","See <code>RangeCircuitBuilder::mock</code>","Creates a new GateThreadBuilder and spawns a main thread …","Creates a new instance of the …","Spawns a new thread for a new given <code>phase</code>. Returns a …","The number of advice columns per phase","The number of fixed columns per phase","The number of advice columns that do not have lookup …","Utility function to parallelize an operation involving …","Creates a new GateThreadBuilder with <code>witness_gen_only</code> set …","Creates a new GateCircuitBuilder.","Creates an instance of the RangeCircuitBuilder and …","See <code>RangeCircuitBuilder::prover</code>","The underlying range configuration","","The gate strategy used for the advice column of the …","Synthesizes from the GateCircuitBuilder by populating the …","Performs the actual computation on the circuit (e.g., …","Performs the actual computation on the circuit (e.g., …","","Returns the current number of threads in the …","Threads for each challenge phase","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new GateThreadBuilder with <code>use_unknown</code> flag set.","Returns the <code>use_unknown</code> flag.","","","","","","","","","Creates a new instance of the circuit without withnesses …","Creates a new instance of the RangeCircuitBuilder without …","","Returns the <code>witness_gen_only</code> flag.","Flag for witness generation. If true, the gate thread …","A configuration for a basic gate chip describing the …","Defines a configuration for a flex gate chip describing …","A chip that implements the GateInstructions trait …","Trait that defines basic arithmetic operations for a gate.","Specifies the gate strategy for the gate chip","The maximum number of phases in halo2.","Vertical Gate Strategy:","Calculates and constrains the accumulated product of ‘a…","Constrains and returns <code>a + b * 1 = out</code>.","Constrains and returns <code>a &amp; b</code>, assumeing <code>a</code> and <code>b</code> are …","Constrains that x is boolean (e.g. 0 or 1).","Constrains that <code>a</code> is equal to <code>constant</code> value.","A Vec of BasicGateConfig that define gates for each halo2 …","Constrains and returns an indicator vector from a slice of …","","","","","","","","","","","","","","","","","Instantiates a new BasicGateConfig.","Generates a new FlexGateConfig","Bitwise left rotate a by BIT bits. BIT and NUM_BITS must …","","Bitwise right rotate a by BIT bits. BIT and NUM_BITS must …","","A Vec of Fixed Columns for allocating constant values.","","","","","","","","","","","Constrains and returns a / b = 0.","","","","","","To avoid Montgomery conversion in <code>F::from</code> for common small …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a u64 into a scalar field element ScalarField.","Returns the the value of <code>n</code> as a ScalarField element.","Constrains and returns a Vec <code>indicator</code> of length <code>len</code>, …","","","","","Constrains and returns the inner product of <code>&lt;a, b&gt;</code>.","Constrains and returns the inner product of <code>&lt;a, b&gt;</code>.","Returns the inner product of <code>&lt;a, b&gt;</code> and the last element …","Returns the inner product of <code>&lt;a, b&gt;</code> and returns a tuple of …","Calculates and constrains the inner product.","Calculates and constrains the inner product.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Constrains that the value of two cells are equal: b - a = …","Constrains that a cell is equal to 0 and returns <code>1</code> if <code>a = 0</code>…","Performs and constrains Lagrange interpolation on <code>coords</code> …","Max number of rows in flex gate.","Constrains and returns  <code>0 + a * b = out</code>.","Constrains and returns  <code>a * b + c = out</code>.","Constrains and returns <code>(1 - a) * b = b - a * b</code>.","Constrains and returns <code>a * (-1) = out</code>.","Returns a new GateChip with the given GateStrategy.","Constrains and returns <code>!a</code> assumeing <code>a</code> is boolean.","Number of advice columns for each halo2 phase.","Constrains and returns little-endian bit vector …","Constrains and returns little-endian bit vector …","Constrains and returns <code>a || b</code>, assuming <code>a</code> and <code>b</code> are …","Constains and returns <code>a || (b &amp;&amp; c)</code>, assuming <code>a</code>, <code>b</code> and <code>c</code> …","Constains and returns <code>a || (b &amp;&amp; c)</code>, assuming <code>a</code>, <code>b</code> and <code>c</code> …","Calculates and constrains the sum of the elements of <code>a</code>.","Returns a slice of the ScalarField field elements 2^i for …","Returns a slice of the ScalarField elements 2i for i in …","The field elements 2^i for i in 0..F::NUM_BITS.","Selector column that stores selector values that are used …","Constrains and returns <code>sel ? a : b</code> assuming <code>sel</code> is boolean.","Constrains and returns <code>sel ? a : b</code> assuming <code>sel</code> is boolean.","Constrains the inner product of <code>a</code> and <code>indicator</code> and …","Constrains and returns <code>cells[idx]</code> if <code>idx &lt; cells.len()</code>, …","","Returns the GateStrategy for the gate.","Returns the GateStrategy the GateChip.","Constrains and returns <code>a + b * (-1) = out</code>.","Constrains and returns the sum of QuantumCell’s in …","Constrains and returns the sum of products of …","Constrains and returns the sum of products of …","","","","","","","","","","","","","","","","","Column that stores the advice values of the gate.","","","","","Constrains and returns <code>a ^ b</code>, assuming <code>a</code> and <code>b</code> are boolean.","The type of Gate used within the instructions.","A chip that implements RangeInstructions which provides …","Configuration for Range Chip","Trait that implements methods to constrain a field element …","Specifies the gate strategy for the range chip","Vertical Gate Strategy:","","","","","","","Performs a range check that <code>a</code> has at most <code>bit_length(b)</code> …","Constrains that ‘a’ is less than ‘b’.","Constrains that ‘a’ is less than ‘b’.","Performs a range check that <code>a</code> has at most <code>bit_length(b)</code> …","","","","","","","Generates a new RangeConfig with the specified parameters.","Creates a new RangeChip with the default strategy and …","","","","","","","Constrains and returns <code>(c, r)</code> such that <code>a = b * c + r</code>.","Constrains and returns <code>(c, r)</code> such that <code>a = b * c + r</code>.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the type of gate used.","The type of Gate used in this chip.","Underlying Gate Configuration","Underlying GateChip for this chip.","Constrains and returns the last bit of the value of <code>a</code>.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Performs a range check that <code>a</code> has at most …","Constrains whether <code>a</code> is in <code>[0, b)</code>, and returns 1 if <code>a</code> &lt; <code>b</code>, …","Constrains whether <code>a</code> is in <code>[0, b)</code>, and returns 1 if <code>a</code> &lt; <code>b</code>, …","Performs a range check that <code>a</code> has at most …","Vec of powers of <code>2 ** lookup_bits</code> represented as …","Loads the lookup table into the circuit using the provided …","Column for lookup table values.","Special advice (witness) Columns used only for lookup …","Returns the number of bits the lookup table represents.","Returns the number of bits represented in the lookup table …","Defines the number of bits represented in the lookup table …","Defines the number of bits represented in the lookup table …","Creates a new RangeChip with the given strategy and …","Selector values for the lookup table.","Checks and constrains that <code>a</code> lies in the range [0, 2…","Checks and constrains that <code>a</code> lies in the range [0, 2…","Returns the GateStrategy for this range.","Returns the GateStrategy for this range.","","","","","","","","","","","","","","","","","Number of bits of each element.","Number of bytes of each element.","","","","","","","","SafeType for bool.","SafeType for bytes32.","SafeType’s goal is to avoid out-of-range undefined …","Chip for SafeType","SafeType for uint128.","SafeType for uint16.","SafeType for uint256.","SafeType for uint32.","SafeType for uint64.","SafeType for uint8.","","Total bits of this type.","Number of elements of this type.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Construct a SafeTypeChip.","Convert a vector of AssignedValue(treated as …","","","","","","","","Return values in littile-endian.","","","","","Helper trait to represent a field element that can be …","","Converts an immutable reference to BigInt to a …","Converts an immutable reference to BigUint to a …","Returns the number of bits needed to represent the value …","Computes the value of an integer by passing as <code>input</code> a Vec …","Decomposes an immutable reference to a BigPrimeField …","Decomposes an immutable reference to a BigInt into …","Decomposes an immutable reference to a BigInt into …","Decomposes an immutable reference to a BigUint into …","Decomposes an immutable reference to a ScalarField element …","Converts a BigPrimeField element into a BigInt element by …","Converts an immutable reference to an PrimeField element …","Creates a field element from a little endian byte …","Module for reading parameters for Halo2 proving system …","Unlike the <code>Coordinates</code> trait, this just returns the raw …","Returns the ceiling of the base 2 logarithm of <code>x</code>.","Returns the modulus of BigPrimeField.","Returns the BigPrimeField element of 2n.","Utilities for testing","Returns the little endian byte representation of the …","Returns the base <code>2&lt;sup&gt;bit_len&lt;/sup&gt;</code> little endian …","Wraps the internal value of <code>value</code> in an Option. If the …","Generates the SRS for the KZG scheme and writes it to a …","Attempts to read the srs from a file found in …","Reads the srs from a file found in …","helper function to verify a proof","helper function to generate a proof with real prover"],"i":[0,3,0,0,3,0,0,3,3,2,2,2,2,2,2,2,3,9,6,2,3,9,6,2,6,2,3,9,6,2,3,9,6,2,2,2,9,2,3,9,6,2,3,9,6,2,3,9,6,2,3,9,6,2,3,3,9,6,2,0,2,0,3,9,6,2,3,9,6,2,2,2,2,2,2,9,0,2,3,9,6,2,3,9,6,2,3,9,6,2,3,9,6,2,0,3,6,6,3,9,6,2,2,2,62,63,64,65,0,0,0,0,0,0,0,28,0,0,0,0,30,0,30,0,30,0,0,0,0,19,0,22,22,24,22,19,26,27,28,29,24,30,22,19,26,27,28,29,24,30,24,22,27,27,24,22,19,26,27,28,29,24,30,22,19,26,27,28,29,24,30,19,24,27,28,24,22,19,22,19,26,27,28,29,24,30,22,19,26,27,28,29,24,30,26,22,19,26,27,28,29,24,30,30,22,19,26,27,28,29,24,30,22,19,26,27,28,29,24,30,19,22,19,26,27,28,29,24,30,24,29,24,22,19,26,27,28,29,24,30,26,19,27,28,24,19,19,27,28,24,19,24,19,26,26,26,0,19,27,28,24,29,26,26,27,27,28,24,19,19,22,19,26,27,28,29,24,30,22,19,26,27,28,29,24,30,22,19,26,27,28,29,24,30,22,19,26,27,28,29,24,30,19,19,22,19,26,27,28,29,24,30,27,28,24,19,19,0,0,0,0,0,0,37,66,66,66,66,66,20,66,37,38,20,39,37,38,20,39,37,38,20,39,37,38,20,39,38,20,66,39,66,39,20,39,37,38,20,39,37,38,20,39,37,66,37,38,20,39,37,39,37,38,20,39,37,38,20,39,66,39,66,37,38,20,39,66,39,66,39,66,39,37,38,20,39,66,66,66,20,66,66,66,66,39,66,20,66,39,66,66,39,66,66,39,39,38,66,39,66,66,37,66,39,66,66,66,39,37,38,20,39,37,38,20,39,37,38,20,39,37,38,20,39,38,37,38,20,39,66,67,0,0,0,0,46,46,47,45,46,47,45,67,67,45,67,46,47,45,46,47,45,47,45,46,47,45,46,47,45,67,67,46,47,45,46,46,47,45,46,47,45,67,45,47,45,67,46,47,45,46,47,45,67,67,45,67,45,47,47,47,67,47,45,45,45,47,67,45,67,45,46,47,45,46,47,45,46,47,45,46,47,45,46,47,45,0,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,48,0,49,48,49,48,48,48,49,48,49,48,49,48,48,49,48,49,48,49,48,49,49,48,49,48,49,48,49,48,48,49,48,0,0,0,68,0,0,0,0,0,0,0,0,0,0,0,1,0,68,0,0,0,0,1,1,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]],[4,[[3,[1]]]]]],[[[2,[1]],5,5]],[[[2,[1]],5,5],[[6,[1]]]],[[[2,[1]],5,5,5,5]],[[[2,[1]],5],[[7,[[6,[1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[[3,[[0,[8,1]]]]],[[3,[[0,[8,1]]]]]],[9,9],[[[6,[[0,[8,1]]]]],[[6,[[0,[8,1]]]]]],[[[2,[[0,[8,1]]]]],[[2,[[0,[8,1]]]]]],[[]],[[]],[[]],[[]],0,[[[2,[1]],6,6]],0,0,[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[[[3,[[0,[11,1]]]],12],13],[[9,12],13],[[[6,[[0,[11,1]]]],12],13],[[[2,[[0,[11,1]]]],12],13],[[[6,[1]]],[[3,[1]]]],[[]],[[]],[[]],[[]],0,[[[2,[1]],14],[[6,[1]]]],0,[[],10],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[]],[[[2,[1]]],[[15,[[6,[1]]]]]],[[[2,[1]],1],[[6,[1]]]],[[[2,[1]],1],[[6,[1]]]],[[[2,[1]]],[[6,[1]]]],[[16,10],[[2,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],18],[[],18],[[],18],[[],18],0,[[[3,[1]]]],[[[6,[1]]]],0,[[]],[[]],[[]],[[]],[[[2,[1]]],16],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[19,[1]],20,21,[22,[1]]],[[22,[1]]]],[[10,[7,[[2,[1]]]],20,21,23]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[24,[1]]],25],0,0,0,0,[[[22,[[0,[8,1]]]]],[[22,[[0,[8,1]]]]]],[[[19,[[0,[8,1]]]]],[[19,[[0,[8,1]]]]]],[26,26],[[[27,[[0,[8,1]]]]],[[27,[[0,[8,1]]]]]],[[[28,[[0,[8,1]]]]],[[28,[[0,[8,1]]]]]],[[[29,[[0,[8,1]]]]],[[29,[[0,[8,1]]]]]],[[[24,[[0,[8,1]]]]],[[24,[[0,[8,1]]]]]],[30,30],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[19,[1]],10,[15,[10]]],26],[[[24,[1]],31,[15,[10]]],26],[32,[[20,[1]]]],[32],[32],[[],[[22,[[0,[33,1]]]]]],[[],[[19,[[0,[33,1]]]]]],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[[],[[17,[26]]]],[10],[10],[10],[10],[10],[10],[10],[10],[[30,30],16],[[[22,[[0,[11,1]]]],12],13],[[[19,[[0,[11,1]]]],12],13],[[26,12],13],[[[27,[[0,[11,1]]]],12],13],[[[28,[[0,[11,1]]]],12],13],[[[29,[[0,[11,1]]]],12],13],[[[24,[[0,[11,1]]]],12],13],[[30,12],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[19,[1]]],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[[24,[1]]],[[7,[1]]]],0,[[[24,[1]]],10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],[[19,[1]]]],[[[19,[1]]],[[27,[1]]]],[[[19,[1]]],[[28,[1]]]],[[[19,[1]],[7,[[6,[1]]]]],[[24,[1]]]],[[[19,[1]],10],2],[[],[[19,[1]]]],[[[19,[1]]],[[27,[1]]]],[[[19,[1]]],[[28,[1]]]],[[[19,[1]],[7,[[6,[1]]]]],[[24,[1]]]],[16,[[19,[1]]]],[[[28,[1]],[7,[[6,[1]]]]],[[24,[1]]]],[[[19,[1]],10],2],0,0,0,[[10,19,7],7],[[],[[19,[1]]]],[[[19,[1]],25],[[27,[1]]]],[[[19,[1]],25],[[28,[1]]]],[[[19,[1]],[7,[[6,[1]]]],25],[[24,[1]]]],0,[26,17],0,[[[27,[1]],20],34],[[[27,[1]],[35,[1]]],[[17,[36]]]],[[[28,[1]],[35,[1]]],[[17,[36]]]],[[[24,[1]],[35,[1]]],[[17,[36]]]],[[[19,[1]]],10],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[[19,[1]],16],[[19,[1]]]],[[[19,[1]]],16],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[27,[1]]],[[27,[1]]]],[[[28,[1]]],[[28,[1]]]],[[[24,[1]]],[[24,[1]]]],[[[19,[1]]],16],0,0,0,0,0,0,0,0,[[2,5,5],[[7,[6]]]],[[2,[4,[3]],[4,[3]]],6],[[2,[4,[3]],[4,[3]]],6],[[2,6]],[[2,6]],0,[2,[[7,[6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[37,37],[[[38,[[0,[8,1]]]]],[[38,[[0,[8,1]]]]]],[[[20,[[0,[8,1]]]]],[[20,[[0,[8,1]]]]]],[[[39,[[0,[8,1]]]]],[[39,[[0,[8,1]]]]]],[[]],[[]],[[]],[[]],[[32,37,40],[[38,[1]]]],[[32,37,10,10],[[20,[1]]]],[[2,6],6],[[[39,[1]],2,[6,[1]]],[[6,[1]]]],[[2,6],6],[[[39,[1]],2,[6,[1]]],[[6,[1]]]],0,[[],[[39,[1]]]],[10],[10],[10],[10],[10],[10],[10],[10],[[],[[17,[37]]]],[[2,[4,[3]],[4,[3]]],6],[10],[10],[10],[10],[[37,37],16],0,[[37,12],13],[[[38,[[0,[11,1]]]],12],13],[[[20,[[0,[11,1]]]],12],13],[[[39,[[0,[11,1]]]],12],13],[[]],[[]],[[]],[[]],[41],[[[39,[1]],41],1],[[2,[4,[3]],10],[[7,[6]]]],[[],10],[[],10],[[],10],[[],10],[[2,5,5],6],[[[39,[1]],2,5,5],[[6,[1]]]],[[2,5,5]],[[[39,[1]],2,5,5]],[[2,5,5],[[43,[42]]]],[[[39,[1]],2,5,5],[[43,[42]]]],[[]],[[]],[[]],[[]],[[2,[4,[3]],[4,[3]]],6],[[2,6],6],[[2,6]],0,[[2,[4,[3]],[4,[3]]],6],[[2,[4,[3]],[4,[3]],[4,[3]]],6],[[2,[4,[3]],[4,[3]]],6],[[2,[4,[3]]],6],[37,[[39,[1]]]],[[2,[4,[3]]],6],0,[[2,6,10],[[7,[6]]]],[[[39,[1]],2,[6,[1]],10],[[7,[[6,[1]]]]]],[[2,[4,[3]],[4,[3]]],6],[[2,[4,[3]],[4,[3]],[4,[3]]],6],[[[39,[1]],2,[4,[[3,[1]]]],[4,[[3,[1]]]],[4,[[3,[1]]]]],[[6,[1]]]],[[2,5],[[43,[42]]]],[[]],[[[39,[1]]]],0,0,[[2,[4,[3]],[4,[3]],[4,[3]]],6],[[[39,[1]],2,[4,[[3,[1]]]],[4,[[3,[1]]]],[4,[[3,[1]]]]],[[6,[1]]]],[[2,5,5],6],[[2,5,[4,[3]]],6],[37,17],[[],37],[[[39,[1]]],37],[[2,[4,[3]],[4,[3]]],6],[[2,5],6],[[2,5,3],6],[[[39,[1]],2,5,[3,[1]]],[[6,[1]]]],[[]],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],18],[[],18],[[],18],[[],18],0,[[]],[[]],[[]],[[]],[[2,[4,[3]],[4,[3]]],6],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[2,6,44]],[[2,[4,[3]],[4,[3]],10]],[[[45,[1]],2,[4,[[3,[1]]]],[4,[[3,[1]]]],10]],[[2,6,41]],[46,46],[[[47,[[0,[8,1]]]]],[[47,[[0,[8,1]]]]]],[[[45,[[0,[8,1]]]]],[[45,[[0,[8,1]]]]]],[[]],[[]],[[]],[[32,46,10,10,10],[[47,[1]]]],[10,[[45,[1]]]],[10],[10],[10],[10],[10],[10],[[2,[4,[3]],[4,[44]],10]],[[2,[4,[3]],[4,[3]],10,10]],[10],[10],[10],[[46,46],16],[[46,12],13],[[[47,[[0,[11,1]]]],12],13],[[[45,[[0,[11,1]]]],12],13],[[]],[[]],[[]],[[]],[[[45,[1]]]],0,0,[[2,6,10],6],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[2,6,44],6],[[2,[4,[3]],[4,[3]],10],6],[[[45,[1]],2,[4,[[3,[1]]]],[4,[[3,[1]]]],10],[[6,[1]]]],[[2,6,41],6],0,[[[47,[1]]],[[17,[36]]]],0,0,[[],10],[[[47,[1]]],10],[[[45,[1]]],10],0,[[46,10],[[45,[1]]]],0,[[2,6,10]],[[[45,[1]],2,[6,[1]],10]],[[],46],[[[45,[1]]],46],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],18],[[],18],[[],18],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[[48,[[0,[8,1]]]]],[[48,[[0,[8,1]]]]]],[[]],[10],[10],[10],[10],[10],[10],[[[48,[[0,[11,1]]]],12],13],[[]],[[]],[[],10],[[],10],[[]],[[]],[45,[[49,[1]]]],[[[49,[1]],2,[7,[[6,[1]]]]],[[48,[1]]]],[[]],[[],17],[[],17],[[],17],[[],17],[[],18],[[],18],[[[48,[1]]],7],[[]],[[]],0,0,0,[[10,10]],[50,51],[44,51],[41,10],[[[7,[44]],10],44],[[10,10],[[7,[51]]]],[[50,10,10],[[7,[51]]]],[[[52,[50]],10,10],[[7,[[52,[51]]]]]],[[44,10,10],[[7,[51]]]],[[10,10],[[7,[41]]]],[[],50],[[],44],[[]],0,[[]],[41,10],[[],44],[10,51],0,[[],[[7,[40]]]],[[10,10],[[7,[41]]]],[52,15],[31,[[54,[53]]]],[[31,55],[[57,[56]]]],[31,[[54,[53]]]],[[54,58,16]],[[54,59,[61,[60]]],[[7,[40]]]]],"p":[[8,"ScalarField"],[3,"Context"],[4,"QuantumCell"],[8,"Into"],[8,"IntoIterator"],[3,"AssignedValue"],[3,"Vec"],[8,"Clone"],[3,"ContextCell"],[15,"usize"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[15,"isize"],[4,"Option"],[15,"bool"],[4,"Result"],[3,"TypeId"],[3,"GateThreadBuilder"],[3,"FlexGateConfig"],[3,"Region"],[3,"KeygenAssignments"],[6,"ThreadBreakPoints"],[3,"RangeWithInstanceCircuitBuilder"],[6,"MultiPhaseThreadBreakPoints"],[3,"FlexGateConfigParams"],[3,"GateCircuitBuilder"],[3,"RangeCircuitBuilder"],[3,"RangeWithInstanceConfig"],[4,"CircuitBuilderStage"],[15,"u32"],[3,"ConstraintSystem"],[8,"Default"],[3,"HashMap"],[8,"Layouter"],[4,"Error"],[4,"GateStrategy"],[3,"BasicGateConfig"],[3,"GateChip"],[15,"u8"],[15,"u64"],[8,"Iterator"],[3,"Box"],[3,"BigUint"],[3,"RangeChip"],[4,"RangeStrategy"],[3,"RangeConfig"],[3,"SafeType"],[3,"SafeTypeChip"],[3,"BigInt"],[25,"BigPrimeField"],[3,"Value"],[3,"Bn256"],[3,"ParamsKZG"],[8,"Fn"],[8,"CurveAffine"],[8,"ParamsProver"],[3,"VerifyingKey"],[3,"ProvingKey"],[3,"Fr"],[8,"Circuit"],[13,"Existing"],[13,"Witness"],[13,"WitnessFraction"],[13,"Constant"],[8,"GateInstructions"],[8,"RangeInstructions"],[8,"CurveAffineExt"]]},\
"halo2_ecc":{"doc":"","tn":["bigint","bn254","ecc","fields","halo2_base","impl_field_ext_chip_common","secp256k1","BigIntStrategy","CRTInteger","FixedCRTInteger","FixedOverflowInteger","OverflowInteger","ProperCrtUint","ProperUint","Simple","add_no_carry","as_ref","as_ref","assign","assign","big_is_equal","big_is_zero","big_less_than","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","carry_mod","check_carry_mod_to_zero","check_carry_to_zero","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","construct","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","eq","evaluate_native","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from_native","from_native","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into_crt","into_overflow","limbs","limbs","limbs","limbs","limbs","max_limb_bits","mul_no_carry","native","native","native","negative","new","new","new","scalar_mul_and_add_no_carry","scalar_mul_no_carry","select","select","select","select","select","select","select","select","select_by_indicator","select_by_indicator","select_by_indicator","select_by_indicator","select_by_indicator","select_by_indicator","select_by_indicator","select_by_indicator","select_by_indicator","sub","sub_no_carry","to_bigint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","truncation","truncation","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value","value","vzip","vzip","vzip","vzip","vzip","vzip","vzip","assign","crt","assign","assign","crt","positive","assign","crt","crt","truncate","crt","truncate","assign","assign","crt","assign","crt","assign","crt","assign","crt","assign","crt","assign","crt","Fp12Chip","Fp2Chip","FpChip","FpPoint","FqPoint","cyclotomic_compress","cyclotomic_decompress","cyclotomic_pow","cyclotomic_square","easy_part","final_exp","final_exp","frobenius_map","hard_part_BN","pairing","pow","PairingChip","borrow","borrow_mut","deref","deref_mut","drop","final_exp","fp12_multiply_with_line_equal","fp12_multiply_with_line_unequal","fp_chip","from","init","into","load_private_g1_unchecked","load_private_g2_unchecked","miller_loop","miller_loop_BN","multi_miller_loop","multi_miller_loop_BN","neg_twisted_frobenius","new","pairing","pairing_check","select","select_by_indicator","sparse_fp12_multiply","sparse_line_function_equal","sparse_line_function_unequal","try_from","try_into","twisted_frobenius","type_id","vzip","BaseFieldEccChip","ComparableEcPoint","EcPoint","EccChip","NonStrict","Strict","StrictEcPoint","add_unequal","assert_equal","assert_is_on_curve","assign_constant_point","assign_point","assign_point_unchecked","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check_is_on_curve","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","double","drop","drop","drop","drop","ec_add_unequal","ec_double","ec_double_and_add_unequal","ec_select","ec_select_by_indicator","ec_select_from_bits","ec_sub_strict","ec_sub_unequal","ecdsa","field_chip","field_chip","fixed_base","fixed_base_msm","fixed_base_msm_in","fixed_base_scalar_mult","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","get_naf","init","init","init","init","into","into","into","into","into_strict_point","is_equal","is_on_curve_or_infinity","load_private","load_private_unchecked","load_random_point","load_random_point","multi_scalar_multiply","negate","new","new","new","pippenger","scalar_mult","scalar_multiply","select","select","select","select","select","select_by_indicator","select_by_indicator","select_by_indicator","select_by_indicator","strict_ec_select_from_bits","sub_unequal","sum","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","variable_base_msm","variable_base_msm_in","vzip","vzip","vzip","vzip","x","x","x","y","y","y","0","0","ecdsa_verify_no_pubkey_check","msm_par","scalar_multiply","multi_exp_par","FieldChip","FieldExtConstructor","FieldPoint","FieldType","FpStrategy","PRIME_FIELD_NUM_BITS","PrimeField","PrimeFieldChip","RangeChip","ReducedFieldPoint","Selectable","Simple","UnsafeFieldPoint","add_constant_no_carry","add_no_carry","assert_equal","borrow","borrow_mut","carry_mod","check_carry_mod_to_zero","clone","clone_into","coeffs","deref","deref_mut","deserialize","divide","divide_unsafe","drop","enforce_less_than","fmt","fp","fp12","fp2","from","gate","get_assigned_value","init","into","is_equal","is_equal_unenforced","is_soft_nonzero","is_soft_zero","is_zero","limb_bases","limb_bits","limb_mask","load_constant","load_private","load_private_reduced","mul","mul_no_carry","native_modulus","neg_divide","neg_divide_unsafe","negate","new","num_limbs","range","range_check","scalar_mul_and_add_no_carry","scalar_mul_no_carry","select","select","select_by_indicator","select_by_indicator","serialize","sub_no_carry","to_owned","try_from","try_into","type_id","vector","vzip","BaseFieldChip","FpChip","FpConfig","Reduced","add_constant_no_carry","add_no_carry","as_ref","assert_equal","borrow","borrow","borrow_mut","borrow_mut","carry_mod","check_carry_mod_to_zero","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","enforce_less_than","enforce_less_than_p","fmt","fmt","from","from","get_assigned_value","init","init","inner","into","into","is_equal_unenforced","is_soft_nonzero","is_soft_zero","is_zero","limb_base_big","limb_bases","limb_bases","limb_bits","limb_bits","limb_mask","limb_mask","load_constant","load_constant_uint","load_private","mul_no_carry","native_modulus","native_modulus","negate","new","num_limbs","num_limbs","num_limbs_bits","num_limbs_log2_ceil","p","p_limbs","p_native","range","range","range_check","scalar_mul_and_add_no_carry","scalar_mul_no_carry","select","select","select","select","select_by_indicator","select_by_indicator","select_by_indicator","select_by_indicator","sub_no_carry","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","0","Fp12Chip","add_constant_no_carry","add_no_carry","assert_equal","borrow","borrow_mut","carry_mod","check_carry_mod_to_zero","clone","clone_into","conjugate","cyclotomic_compress","cyclotomic_decompress","cyclotomic_pow","cyclotomic_square","deref","deref_mut","drop","easy_part","enforce_less_than","final_exp","fmt","fp2_mul_no_carry","fp_chip","frobenius_map","from","get_assigned_value","hard_part_BN","init","into","is_equal_unenforced","is_soft_nonzero","is_soft_zero","is_zero","limb_bits","load_constant","load_private","mul_no_carry","mul_no_carry_w6","native_modulus","negate","new","pow","range","range_check","scalar_mul_and_add_no_carry","scalar_mul_no_carry","select","select_by_indicator","sub_no_carry","to_owned","try_from","try_into","type_id","vzip","0","Fp2Chip","add_constant_no_carry","add_no_carry","assert_equal","borrow","borrow_mut","carry_mod","check_carry_mod_to_zero","clone","clone_into","conjugate","deref","deref_mut","drop","enforce_less_than","fmt","fp_chip","from","get_assigned_value","init","into","is_equal_unenforced","is_soft_nonzero","is_soft_zero","is_zero","limb_bits","load_constant","load_private","mul_no_carry","native_modulus","neg_conjugate","negate","new","range","range_check","scalar_mul_and_add_no_carry","scalar_mul_no_carry","select","select_by_indicator","sub_no_carry","to_owned","try_from","try_into","type_id","vzip","0","FieldVector","FieldVectorChip","add_constant_no_carry","add_no_carry","as_bits","as_ref","assert_equal","batch_invert","borrow","borrow","borrow_mut","borrow_mut","carry_mod","check_carry_mod_to_zero","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","enforce_less_than","fmt","fmt","fp_chip","fp_mul_no_carry","from","from","from","from","from","gate","index","index_mut","init","init","into","into","into_iter","is_equal_unenforced","is_soft_nonzero","is_soft_zero","is_zero","load_constant","load_private","negate","new","range_check","scalar_mul_and_add_no_carry","scalar_mul_no_carry","select","select","select","select_by_indicator","select_by_indicator","sub_no_carry","to_owned","to_owned","try_as_bits","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","FpChip","FqChip","SECP_B","Secp256k1Chip"],"q":["halo2_ecc","","","","","","","halo2_ecc::biginthalo2_ecc::bigint::add_no_carry","","halo2_ecc::bigint::big_is_equal","halo2_ecc::bigint::big_is_zero","","","halo2_ecc::bigint::big_less_than","halo2_ecc::bigint::carry_mod","halo2_ecc::bigint::check_carry_mod_to_zero","halo2_ecc::bigint::check_carry_to_zero","halo2_ecc::bigint::mul_no_carry","","halo2_ecc::bigint::negative","halo2_ecc::bigint::scalar_mul_and_add_no_carry","","halo2_ecc::bigint::scalar_mul_no_carry","","halo2_ecc::bigint::select","","halo2_ecc::bigint::select_by_indicator","","halo2_ecc::bigint::sub","","halo2_ecc::bigint::sub_no_carry","","halo2_ecc::bn254","","","","","","","","","","","","","","","","halo2_ecc::bn254::pairing","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","halo2_ecc::ecc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","halo2_ecc::ecc::ComparableEcPoint","","halo2_ecc::ecc::ecdsa","halo2_ecc::ecc::fixed_base","","halo2_ecc::ecc::pippenger","halo2_ecc::fields","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","halo2_ecc::fields::fp","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","halo2_ecc::fields::fp12","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","halo2_ecc::fields::fp2","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","halo2_ecc::fields::vector","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","halo2_ecc::secp256k1","","",""],"d":["","","","","","","","","","","","","Safe wrapper for representing a BigUint as a <code>CRTInteger</code> …","Safe wrapper around a BigUint represented as a vector of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes <code>sum_i limbs[i] * limb_bases[i]</code> in native field <code>F</code>. …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Input: a BigInteger <code>value</code>, Output: the <code>FixedOverflowInteger</code>…","Input: a BigInteger <code>value</code>, Output: the <code>FixedCRTInteger</code> …","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Computes <code>sum_i limbs[i] * limb_bases[i]</code> in native field <code>F</code>. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","only use case is when coeffs has only a single 1, rest are …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Assumptions","Assumptions","Given <code>ProperUint</code>s <code>a</code> and <code>b</code> with the same number of limbs, …","Given ProperUint <code>a</code>, returns 1 iff every limb of <code>a</code> is zero. …","Returns 0 or 1. Returns 1 iff the limbs of <code>a</code> are …","Assumptions","","Assumptions","","","","Assumptions","","compute a * c + b = b + a * c","compute a * c + b = b + a * c","","","Assumptions","","only use case is when coeffs has only a single 1, rest are …","only use case is when coeffs has only a single 1, rest are …","Assumptions","Assumptions","Assumptions","","","","","","","in = g0 + g2 w + g4 w^2 + g1 w^3 + g3 w^4 + g5 w^5 where …","Input:","Assumptions","","Assumptions","","","","","","Assumptions","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","An elliptic curve point where the x-coordinate has already …","","","","","An elliptic curve point where it is easy to compare the …","Assumes that P.x != Q.x If <code>is_strict == true</code>, then …","","","","Load affine point as private witness. Constrains witness …","Does not constrain witness to lie on curve","","","","","","","","","Checks that <code>P</code> is indeed a point on the elliptic curve <code>C</code>.","","","","","","","","","","","","","","","","","","","","","","If <code>is_strict = true</code>, then this function constrains that …","Assumptions","Implements: computing 2P + Q = P + Q + P for P = (x0, y0), …","","","","Constrains <code>P != -Q</code> but allows <code>P == Q</code>, in which case output …","If <code>is_strict = true</code>, then this function constrains that …","","","","","","<code>clump_factor = 0</code> means auto-calculate","See <code>fixed_base::scalar_multiply</code> for more details.","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Load affine point as private witness. Constrains witness …","Does not constrain witness to lie on curve","","","Assumptions","","","","","","See <code>scalar_multiply</code> for more details.","Computes <code>[scalar] * P</code> on short Weierstrass curve …","","","","","","","","","","","Assumes that P.x != Q.x Otherwise will panic","None of elements in <code>points</code> can be point at infinity.","","","","","","","","","","","","","","","","","See <code>pippenger::multi_exp_par</code> for more details.","","","","","","","","","","","","","","<strong>WARNING</strong>: Only use this function if <code>1 / (p - n)</code> is very …","Assumptions","Computes <code>[scalar] * P</code> on y^2 = x^3 + b where <code>P</code> is fixed …","Multi-thread witness generation for multi-scalar …","Trait for common functionality for finite field chips. …","","The “proper” representation of a field element. …","A type implementing <code>Field</code> trait to help with witness …","","","","","","A proper representation of field elements that guarantees …","","","A representation of a field element that is used for …","output: <code>a + c</code>","","","","","","","","","","","","","Constrains that <code>b</code> is nonzero as a field element and then …","Returns <code>a / b</code> without constraining <code>b</code> to be nonzero.","","Constrains that <code>a</code> is a reduced representation and returns …","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","Assigns <code>fe</code> as constant.","Assigns <code>fe</code> as private witness. Note that the witness may …","Assigns <code>fe</code> as private witness and contrains the witness to …","If using <code>UnsafeFieldPoint</code>, make sure multiplication does …","","","Constrains that <code>b</code> is nonzero as a field element and then …","","","","","","","a * c + b","a * c","","","","","","","","","","","","","","","","Wrapper around <code>FieldPoint</code> to guarantee this is a “reduced…","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Given proper CRT integer <code>a</code>, returns 1 iff …","Returns 1 iff <code>a</code> is 0 as a BigUint. This means that even if …","","","","","","","","","","","","","","","","","","","","","","","","","","Assumptions","","","","","","","","","","","","","","","","","","","","","","","Represent Fp12 point as FqPoint with degree = 12 …","","","","","","","","","","","in = g0 + g2 w + g4 w^2 + g1 w^3 + g3 w^4 + g5 w^5 where …","Input:","Assumptions","","","","","Assumptions","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","multiply Fp2 elts: (a0 + a1 * u) * (XI0 + u) without carry","","","User must construct an <code>FpChip</code> first using a config. This …","Assumptions","","","","","","","","","","","","","","Represent Fp2 point as <code>FieldVector</code> with degree = 2 …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","User must construct an <code>FpChip</code> first using a config. This …","","","","","","","","","","","","","","A fixed length vector of <code>FieldPoint</code>s","Contains common functionality for vector operations that …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,2,3,5,8,0,0,0,11,13,7,5,2,3,8,11,13,7,5,2,3,8,0,0,0,11,13,7,5,2,3,8,11,13,7,5,2,3,8,5,11,11,13,7,5,2,3,8,11,13,7,5,2,3,8,11,13,7,5,2,3,8,11,13,11,13,7,5,2,3,8,11,13,7,7,5,2,2,2,2,3,3,3,8,5,8,11,13,7,5,2,3,8,11,13,7,5,2,3,8,7,7,7,2,3,13,5,13,0,2,3,2,0,13,2,8,0,0,0,11,13,7,5,2,3,8,0,11,13,7,5,5,2,3,8,0,0,5,11,13,7,5,2,3,8,2,8,11,13,7,5,2,3,8,11,13,7,5,2,3,8,11,13,7,5,2,3,8,3,2,8,11,13,7,5,2,3,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,28,28,28,28,0,28,28,28,0,28,0,31,31,31,31,31,31,0,0,31,31,31,31,31,31,31,0,31,0,0,31,31,31,31,31,0,0,0,31,31,0,31,31,0,0,0,0,41,41,0,37,37,37,37,37,37,33,42,41,37,33,42,41,37,0,33,42,41,37,33,42,41,37,33,42,41,37,33,42,41,37,37,33,42,41,37,0,0,0,0,0,0,0,0,0,37,37,0,37,37,37,33,42,41,37,33,33,33,33,33,42,41,41,41,41,41,37,0,33,42,41,37,33,42,41,37,0,37,37,37,37,0,37,0,37,33,42,37,0,37,0,33,42,41,37,37,33,42,41,37,0,37,37,33,42,41,37,33,42,41,37,33,42,41,37,33,42,41,37,37,37,33,42,41,37,33,33,42,33,33,42,59,60,0,0,0,0,0,0,40,40,0,40,0,0,40,40,0,45,40,40,40,40,45,45,40,40,45,45,61,45,45,45,40,40,45,40,45,0,0,0,45,40,40,45,45,40,40,40,40,40,53,40,53,40,40,40,40,40,40,40,40,40,61,53,40,40,40,40,62,45,62,45,45,40,45,45,45,45,0,45,0,0,0,0,46,46,21,46,21,46,21,46,46,46,21,46,21,46,21,46,21,46,21,46,46,46,21,46,21,46,46,21,46,21,21,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,21,46,46,46,21,46,46,46,46,21,46,21,46,21,46,21,46,21,46,48,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,52,0,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,49,0,0,55,55,49,49,55,49,49,55,49,55,55,55,49,55,49,55,49,55,49,55,49,55,55,49,55,55,55,49,49,49,49,55,55,49,49,49,55,49,55,49,55,55,55,55,55,55,55,55,55,55,55,49,55,55,49,55,55,49,55,49,49,55,49,55,49,55,49,55,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]]],2],[[[3,[1]]],2],[[[5,[4]],6],[[7,[4]]]],[[[8,[4]],6,9,10],[[3,[4]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[11,11],[[[13,[[0,[12,1]]]]],[[13,[[0,[12,1]]]]]],[[[7,[[0,[12,1]]]]],[[7,[[0,[12,1]]]]]],[[[5,[[0,[12,1]]]]],[[5,[[0,[12,1]]]]]],[[[2,[[0,[12,1]]]]],[[2,[[0,[12,1]]]]]],[[[3,[[0,[12,1]]]]],[[3,[[0,[12,1]]]]]],[[[8,[[0,[12,1]]]]],[[8,[[0,[12,1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[14,[4]]],[[5,[4]]]],[[],11],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[[11,11],15],[[6,16],[[17,[1]]]],[[11,18],19],[[[13,[[0,[20,1]]]],18],19],[[[7,[[0,[20,1]]]],18],19],[[[5,[[0,[20,1]]]],18],19],[[[2,[[0,[20,1]]]],18],19],[[[3,[[0,[20,1]]]],18],19],[[[8,[[0,[20,1]]]],18],19],[[]],[[]],[[[3,[1]]],[[7,[1]]]],[[]],[[]],[3,[[2,[1]]]],[[]],[[[3,[1]]],[[2,[1]]]],[2,[[2,[1]]]],[[[21,[[3,[1]]]]],[[3,[1]]]],[[]],[3,[[3,[1]]]],[[]],[[10,9,9],[[5,[4]]]],[[10,9,9],[[8,[4]]]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[7,[1]],6,10,9],[[3,[1]]]],[[[7,[1]],9],[[13,[1]]]],[[[7,[1]]]],[[[2,[1]]]],[[[3,[1]]]],0,0,0,0,[[[2,[1]]],17],[[[3,[1]]],17],0,0,[[[14,[[17,[1]]]],9],[[13,[1]]]],[[[13,[1]],[17,[1]],22],[[2,[1]]]],[[[5,[4]],10],[[8,[4]]]],0,0,0,[[6,21,21,17],21],[[6,21,21,17],21],[[6,21,21,17],21],[[6,21,21,17],21],[[6,21,21,17],21],[[6,21,21,17],21],[[6,21,21,17],21],0,[6,21],[6,21],[6,21],[[6,9],[[13,[4]]]],[6,21],[6,21],[6,21],[6,21],0,0,[[[5,[4]],9],10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[[3,[1]]],10],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[6,[13,[1]],[13,[1]]],[[13,[1]]]],[[6,[2,[1]],[2,[1]]],[[2,[1]]]],[[6,[25,[[7,[1]]]],[25,[[7,[1]]]]],[[17,[1]]]],[[6,[7,[1]]],[[17,[1]]]],[[6,[3,[1]]],[[17,[1]]]],[[6,[13,[1]]],[[17,[1]]]],[[6,[25,[[7,[1]]]],[25,[[7,[1]]]],9,1],[[17,[1]]]],[[6,[2,[4]],9,22,4,9,22],[[3,[4]]]],[[6,[2,[4]],9,22,4,9,22]],[[6,[13,[4]],9,4,22]],[[6,[2,[1]],[2,[1]],9],[[2,[1]]]],[[6,[13,[1]],[13,[1]],9],[[13,[1]]]],[[6,[13,[1]]],[[13,[1]]]],[[6,[13,[1]],[13,[1]],1,9],[[13,[1]]]],[[6,[2,[1]],[2,[1]],26],[[2,[1]]]],[[6,[13,[1]],1,9],[[13,[1]]]],[[6,[2,[1]],26],[[2,[1]]]],[[6,[13,[1]],[13,[1]],[17,[1]]],[[13,[1]]]],[[6,[2,[1]],[2,[1]],[17,[1]]],[[2,[1]]]],[6,[[13,[1]]]],[6,[[2,[1]]]],[[6,[25,[[7,[1]]]],[25,[[7,[1]]]],9,1]],[[6,[3,[1]],[3,[1]],9,1]],[[6,[13,[1]],[13,[1]]],[[13,[1]]]],[[6,[2,[1]],[2,[1]]],[[2,[1]]]],0,0,0,0,0,[[[28,[27]],29],[[14,[[29,[27]]]]]],[[[28,[27]],6,[14,[[29,[27]]]]],[[29,[27]]]],[[[28,[27]],6,[29,[27]],[14,[30]]],[[29,[27]]]],[[[28,[27]],6],[[14,[[29,[27]]]]]],[[[28,[27]],6]],0,[[[28,[27]],6]],[[[28,[27]],6,9]],[[[28,[27]],6]],0,[[[28,[27]],6,[14,[30]]]],0,[[]],[[]],[9],[9],[9],[[[31,[27]],6,[29,[27]]],[[29,[27]]]],[[32,6,29,33,33],[[29,[27]]]],[[32,6,29,33],[[29,[27]]]],0,[[]],[[],9],[[]],[[[31,[27]],6,34],[[33,[27,[35,[27]]]]]],[[[31,[27]],6,36],[[33,[27,[29,[27]]]]]],[[[31,[27]],6,33,33],[[29,[27]]]],[[37,6,33,33],[[29,[27]]]],[[[31,[27]],6,14],[[29,[27]]]],[[37,6,14],[[29,[27]]]],[[37,6,[25,[[33,[27,[29,[27]]]]]],[25,[[29,[27]]]],[25,[[29,[27]]]]],[[33,[27,[29,[27]]]]]],[38,[[31,[27]]]],[[[31,[27]],6,33,33],[[29,[27]]]],[[[31,[27]],6,33,33,33,33]],[[6,21,21,17],21],[6,21],[[32,6,29],[[29,[27]]]],[[32,6,33,33],[[14,[[39,[[29,[27]]]]]]]],[[32,6,33],[[14,[[39,[[29,[27]]]]]]]],[[],23],[[],23],[[37,6,[25,[[33,[27,[29,[27]]]]]],[25,[[29,[27]]]],[25,[[29,[27]]]]],[[33,[27,[29,[27]]]]]],[[],24],[[]],0,0,0,0,0,0,0,[[[37,[27,[40,[27]]]],6,[25,[[41,[27,[40,[27]]]]]],[25,[[41,[27,[40,[27]]]]]],15],[[33,[27]]]],[[[37,[27,[40,[27]]]],6,[33,[27]],[33,[27]]]],[[[37,[27,[40,[27]]]],6,33]],[[[37,[27,[40,[27]]]],6],[[33,[27]]]],[[[37,[27,[40,[27]]]],6],[[33,[27]]]],[[[37,[27,[40,[27]]]],6],[[33,[27]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[6,33]],[[[33,[27,12]]],[[33,[27,12]]]],[[[42,[[0,[12,27]],[0,[12,[40,[[0,[12,27]]]]]]]]],[[42,[[0,[12,27]],[0,[12,[40,[[0,[12,27]]]]]]]]]],[[[41,[[0,[12,27]],[0,[12,[40,[[0,[12,27]]]]]]]]],[[41,[[0,[12,27]],[0,[12,[40,[[0,[12,27]]]]]]]]]],[[[37,[[0,[12,27]],[0,[12,[40,[[0,[12,27]]]]]]]]],[[37,[[0,[12,27]],[0,[12,[40,[[0,[12,27]]]]]]]]]],[[]],[[]],[[]],[[]],[9],[9],[9],[9],[9],[9],[9],[9],[[[37,[27,[40,[27]]]],6,[25,[[33,[27]]]]],[[33,[27]]]],[9],[9],[9],[9],[[6,[25,[[41,[27,[40,[27]]]]]],[25,[[41,[27,[40,[27]]]]]],15],[[33,[27]]]],[[6,[25,[[33,[27]]]]],[[33,[27]]]],[[6,[25,[[41,[27,[40,[27]]]]]],[25,[[41,[27,[40,[27]]]]]],15],[[33,[27]]]],[[6,[33,[27]],[33,[27]],[17,[27]]],[[33,[27]]]],[6,[[33,[27]]]],[6,[[33,[27]]]],[[6,[25,[[33,[27]]]],[25,[[33,[27]]]]],[[33,[27]]]],[[6,[25,[[41,[27,[40,[27]]]]]],[25,[[41,[27,[40,[27]]]]]],15],[[33,[27]]]],0,[[[37,[27,[40,[27]]]]]],0,0,[[[37,[27,[40,[27]]]],43,[14,[[14,[[17,[27]]]]]],9],[[33,[27]]]],[[[37,[27,[40,[27]]]],43,[14,[[14,[[17,[27]]]]]],9,9,9],[[33,[27]]]],[[[37,[27,[40,[27]]]],6,[14,[[17,[27]]]],9,9],[[33,[27]]]],[[[33,[[0,[20,27]],20]],18],19],[[[42,[[0,[20,27]],[0,[20,[40,[[0,[20,27]]]]]]]],18],19],[[[41,[[0,[20,27]],[0,[20,[40,[[0,[20,27]]]]]]]],18],19],[[[37,[[0,[20,27]],[0,[20,[40,[[0,[20,27]]]]]]]],18],19],[[]],[42,[[33,[27]]]],[[[42,[27,[40,[27]]]]],[[33,[27]]]],[33,[[33,[27,12]]]],[[[41,[27,[40,[27]]]]],[[33,[27]]]],[[]],[[[33,[27]]],[[41,[27,[40,[27]]]]]],[[]],[33,[[41,[27,[40,[27]]]]]],[42,[[41,[27,[40,[27]]]]]],[[[42,[27,[40,[27]]]]],[[41,[27,[40,[27]]]]]],[[]],[[[14,[30]]],[[14,[44]]]],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[6,33],42],[[[37,[27,[40,[27]]]],6,[33,[27]],[33,[27]]],[[17,[27]]]],[[[37,[27,[40,[27]]]],6,33],[[17,[27]]]],[[[37,[27,[40,[27]]]],6],[[33,[27]]]],[[[37,[27,[40,[27]]]],6],[[33,[27]]]],[6,33],[[[37,[27,[40,[27]]]],6],[[33,[27]]]],[[6,[14,[[14,[[17,[27]]]]]],9,9],[[33,[27]]]],[[[37,[27,[40,[27]]]],6,[25,[[33,[27]]]]],[[33,[27]]]],[[],[[33,[27]]]],[[],[[42,[27,[40,[27]]]]]],[[],[[37,[27,[40,[27]]]]]],0,[[[37,[27,[40,[27]]]],6,[33,[27]],[14,[[17,[27]]]],9,9],[[33,[27]]]],[[6,[33,[27]],[14,[[17,[27]]]],9,9],[[33,[27]]]],[[6,21,21,17],21],[[6,21,21,17],21],[[6,21,21,17],21],[[6,21,21,17],21],[[[37,[27,[40,[27]]]],6,[33,[27]],[33,[27]],[17,[27]]],[[33,[27]]]],[6,21],[6,21],[6,21],[6,21],[6,[[42,[27]]]],[[[37,[27,[40,[27]]]],6,[25,[[41,[27,[40,[27]]]]]],[25,[[41,[27,[40,[27]]]]]],15],[[33,[27]]]],[[[37,[27,[40,[27]]]],6,16],[[33,[27]]]],[[]],[[]],[[]],[[]],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],[[],24],[[[37,[27,[40,[27]]]],43,[14,[[14,[[17,[27]]]]]],9],[[33,[27]]]],[[[37,[27,[40,[27]]]],43,[14,[[14,[[17,[27]]]]]],9,9,9],[[33,[27]]]],[[]],[[]],[[]],[[]],[[[33,[27]]]],0,0,[[[33,[27]]]],0,0,0,0,[[37,6,[33,[27]],[3,[27]],[3,[27]],[3,[27]],9,9],[[17,[27]]]],[[37,43,[14,[[14,[17]]]],9,9,9],33],[[6,[14,[17]],9,9],33],[[43,[14,[[14,[[17,[27]]]]]],9,9,9],[[33,[27]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[6,25]],[[6,25,25]],[[6,25,25]],[[]],[[]],[6],[6],[45,45],[[]],[[],14],[9],[9],[[],[[23,[45]]]],[[6,25,25]],[[6,25,25]],[9],[6],[[45,18],19],0,0,0,[[]],[[]],[[]],[[],9],[[]],[[6,25,25],17],[6,17],[[6,25],17],[[6,25],17],[[6,25],17],[[]],[[],9],[[],10],[6],[6],[6],[[6,25,25]],[[6,25,25]],[[],10],[[6,25,25]],[[6,25,25]],[6],[[]],[[],9],[[]],[[6,25,9]],[[6,25,25,26]],[[6,25,26]],[[6,17]],[[6,21,21,17],21],[6],[6,21],[45,23],[[6,25,25]],[[]],[[],23],[[],23],[[],24],0,[[]],0,0,0,0,[[[46,[27,27]],6,[25,[[2,[27]]]],27],[[2,[27]]]],[[[46,[27,27]],6,[25,[[2,[27]]]],[25,[[2,[27]]]]],[[2,[27]]]],[21,21],[[[46,[27,27]],6,[25,[[3,[27]]]],[25,[[3,[27]]]]]],[[]],[[]],[[]],[[]],[[[46,[27,27]],6,[2,[27]]],[[3,[27]]]],[[[46,[27,27]],6,[2,[27]]]],[[[21,[12,12]]],[[21,[12,12]]]],[[[46,[[0,[12,27]],[0,[12,27]]]]],[[46,[[0,[12,27]],[0,[12,27]]]]]],[[]],[[]],[9],[9],[9],[9],[9],[9],[[[46,[27,27]],6,[3,[27]]],[[21,[[3,[27]],27]]]],[[[46,[27,27]],6,[3,[27]]]],[[[21,[20,20]],18],19],[[[46,[[0,[20,27]],[0,[20,27]]]],18],19],[[]],[[]],[[[46,[27,27]],2],27],[[],9],[[],9],[21],[[]],[[]],[[[46,[27,27]],6,[21,[[3,[27]],27]],[21,[[3,[27]],27]]],[[17,[27]]]],[[[46,[27,27]],6,[25,[[3,[27]]]]],[[17,[27]]]],[[[46,[27,27]],6,[25,[[3,[27]]]]],[[17,[27]]]],[[[46,[27,27]],6,[25,[[3,[27]]]]],[[17,[27]]]],0,[[[46,[27,27]]]],0,[[[46,[27,27]]],9],0,[[[46,[27,27]]],10],0,[[[46,[27,27]],6,27],[[3,[27]]]],[[[46,[27,27]],6,10],[[3,[27]]]],[[[46,[27,27]],6,27],[[3,[27]]]],[[[46,[27,27]],6,[25,[[2,[27]]]],[25,[[2,[27]]]]],[[2,[27]]]],[[[46,[27,27]]],10],0,[[[46,[27,27]],6,[3,[27]]],[[3,[27]]]],[[47,9,9],[[46,[27,27]]]],[[[46,[27,27]]],9],0,0,0,0,0,0,[[[46,[27,27]]]],0,[[[46,[27,27]],6,[25,[[2,[27]]]],9]],[[[46,[27,27]],6,[25,[[2,[27]]]],[25,[[2,[27]]]],26],[[2,[27]]]],[[[46,[27,27]],6,[25,[[2,[27]]]],26],[[2,[27]]]],[[6,21,21,17],21],[[6,21,21,17],21],[[[46,[27,27]],6,[3,[27]],[3,[27]],[17,[27]]],[[3,[27]]]],[[[46,[27,27]],6,[2,[27]],[2,[27]],[17,[27]]],[[2,[27]]]],[6,21],[[[46,[27,27]],6],[[2,[27]]]],[6,21],[[[46,[27,27]],6],[[3,[27]]]],[[[46,[27,27]],6,[25,[[2,[27]]]],[25,[[2,[27]]]]],[[2,[27]]]],[[]],[[]],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[[]],[[]],0,0,[[48,6,25]],[[48,6,25,25]],[[48,6,25,25]],[[]],[[]],[[48,6]],[[48,6]],[[[48,[[0,[12,27]],[0,[12,[40,[[0,[12,27]]]]]],12]]],[[48,[[0,[12,27]],[0,[12,[40,[[0,[12,27]]]]]],12]]]],[[]],[[48,6,49],49],[[[48,[27,[46,[27,50]],51]],29],[[14,[[29,[27]]]]]],[[[48,[27,[46,[27,50]],51]],6,[14,[[29,[27]]]]],[[29,[27]]]],[[[48,[27,[46,[27,50]],51]],6,[29,[27]],[14,[30]]],[[29,[27]]]],[[[48,[27,[46,[27,50]],51]],6],[[14,[[29,[27]]]]]],[9],[9],[9],[[[48,[27,[46,[27,50]],51]],6]],[[48,6]],[[[48,[27,[46,[27,50]],51]],6]],[[[48,[[0,[20,27]],[0,[20,[40,[[0,[20,27]]]]]],20]],18],19],[[48,6,49,49],49],[48],[[[48,[27,[46,[27,50]],51]],6,9]],[[]],[48],[[[48,[27,[46,[27,50]],51]],6]],[[],9],[[]],[[48,6],17],[[48,6,25],17],[[48,6,25],17],[[48,6,25],17],[48,9],[[48,6]],[[48,6]],[[48,6,25,25]],[[6,49],49],[48,10],[[48,6]],[[],48],[[[48,[27,[46,[27,50]],51]],6,[14,[30]]]],[48],[[48,6,25,9]],[[48,6,25,25,26]],[[48,6,25,26]],[[6,21,21,17],21],[6,21],[[48,6,25,25]],[[]],[[],23],[[],23],[[],24],[[]],0,0,[[52,6,25]],[[52,6,25,25]],[[52,6,25,25]],[[]],[[]],[[52,6]],[[52,6]],[[[52,[[0,[12,27]],[0,[12,[40,[[0,[12,27]]]]]],12]]],[[52,[[0,[12,27]],[0,[12,[40,[[0,[12,27]]]]]],12]]]],[[]],[[[52,[27,[53,[27]],54]],6,49],49],[9],[9],[9],[[52,6]],[[[52,[[0,[20,27]],[0,[20,[40,[[0,[20,27]]]]]],20]],18],19],[[[52,[27,[53,[27]],54]]]],[[]],[52],[[],9],[[]],[[52,6],17],[[52,6,25],17],[[52,6,25],17],[[52,6,25],17],[52,9],[[52,6]],[[52,6]],[[52,6,25,25]],[52,10],[[[52,[27,[53,[27]],54]],6,49],49],[[52,6]],[[],[[52,[27,[53,[27]],54]]]],[52],[[52,6,25,9]],[[52,6,25,25,26]],[[52,6,25,26]],[[6,21,21,17],21],[6,21],[[52,6,25,25]],[[]],[[],23],[[],23],[[],24],[[]],0,0,0,[[55,6,16],49],[[55,6,16,16],49],[[],56],[49],[[55,6,16,16]],[[]],[[]],[[]],[[]],[[]],[[55,6,16],49],[[55,6,16]],[[[49,[12]]],[[49,[12]]]],[[[55,[[0,[12,27]],[0,[12,[40,[[0,[12,27]]]]]]]]],[[55,[[0,[12,27]],[0,[12,[40,[[0,[12,27]]]]]]]]]],[[]],[[]],[9],[9],[9],[9],[9],[9],[[55,6,16],49],[[[49,[20]],18],19],[[[55,[[0,[20,27]],[0,[20,[40,[[0,[20,27]]]]]]]],18],19],0,[[55,6,16,25],49],[49,[[49,[[57,[12]]]]]],[[]],[[[49,[21]]],49],[[[49,[[3,[1]]]]],[[49,[[2,[1]]]]]],[[]],[55],[[49,9]],[[49,9]],[[],9],[[],9],[[]],[[]],[49],[[55,6,16,16],17],[[55,6,16],17],[[55,6,16],17],[[55,6,16],17],[[55,6],49],[[55,6],49],[[55,6,16],49],[[],55],[[55,6,16,9]],[[55,6,16,16,26],49],[[55,6,16,26],49],[[6,21,21,17],21],[[6,21,21,17],21],[[55,6,16,16,17],49],[6,21],[6,21],[[55,6,16,16],49],[[]],[[]],[[],[[23,[56,58]]]],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[[]],[[]],0,0,0,0],"p":[[8,"ScalarField"],[3,"CRTInteger"],[3,"ProperCrtUint"],[25,"BigPrimeField"],[3,"FixedOverflowInteger"],[3,"Context"],[3,"ProperUint"],[3,"FixedCRTInteger"],[15,"usize"],[3,"BigUint"],[4,"BigIntStrategy"],[8,"Clone"],[3,"OverflowInteger"],[3,"Vec"],[15,"bool"],[8,"IntoIterator"],[3,"AssignedValue"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[3,"Reduced"],[3,"BigInt"],[4,"Result"],[3,"TypeId"],[8,"Into"],[15,"i64"],[25,"PrimeField"],[6,"Fp12Chip"],[6,"FqPoint"],[15,"u64"],[3,"PairingChip"],[6,"Fp2Chip"],[3,"EcPoint"],[3,"G1Affine"],[6,"FpPoint"],[3,"G2Affine"],[3,"EccChip"],[6,"FpChip"],[4,"Option"],[8,"FieldChip"],[4,"ComparableEcPoint"],[3,"StrictEcPoint"],[3,"GateThreadBuilder"],[15,"i8"],[4,"FpStrategy"],[3,"FpChip"],[3,"RangeChip"],[3,"Fp12Chip"],[3,"FieldVector"],[3,"Fq"],[3,"Fq12"],[3,"Fp2Chip"],[8,"PrimeFieldChip"],[8,"Field"],[3,"FieldVectorChip"],[3,"BitSlice"],[8,"From"],[4,"BitSpanError"],[13,"Strict"],[13,"NonStrict"],[8,"FieldExtConstructor"],[8,"Selectable"]]},\
"poseidon":{"doc":"","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["PoseidonChip","borrow","borrow_mut","clear","deref","deref_mut","drop","from","init","into","new","squeeze","try_from","try_into","type_id","update","vzip"],"q":["poseidon","","","","","","","","","","","","","","","",""],"d":["","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],"f":[0,[[]],[[]],[[[2,[1]]]],[3],[3],[3],[[]],[[],3],[[]],[[4,3,3],[[6,[[2,[1]],5]]]],[[[2,[1]],4],[[6,[[7,[1]],5]]]],[[],6],[[],6],[[],8],[[[2,[1]]]],[[]]],"p":[[8,"ScalarField"],[3,"PoseidonChip"],[15,"usize"],[3,"Context"],[4,"Error"],[4,"Result"],[3,"AssignedValue"],[3,"TypeId"]]},\
"zkevm_keccak":{"doc":"The zkEVM keccak circuit implementation, with some minor …","t":[2,14,14,0,0,14,14,3,3,3,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,12,11,11,11,12,5,5,12,11,5,5,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,17,17,17,17,17,17,17,17,17,17,17,17,17,3,17,17,3,12,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,0,0,5,11,11,11,11,5,5,5,5,11,11,11,11,5,11,5,5,5,5,12,5,5,5,0,5,0,11,11,11,11,11,11,11,11,5,11,11,3,11,11,12,12,11,11,11,11,11,11,11,12,11,11,11,11,12,12,12,12,12,12,12,3,6,3,3,8,3,3,3,6,18,18,3,8,8,8,8,8,3,3,3,6,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,12,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,12,12,10,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,0,10,5,0,0,5,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5],"n":["KeccakConfig","address","impl_expr","keccak_packed_multi","util","word","word_map","KeccakCircuitConfig","KeccakRow","KeccakTable","assign","assign_advice_custom","assign_fixed_custom","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","challenge","clone","clone","clone","clone_into","clone_into","clone_into","construct","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","dummy_rows","fmt","fmt","fmt","from","from","from","get_keccak_capacity","get_num_keccak_f","get_num_rows_per_round","init","init","init","input_rlc","into","into","into","is_enabled","keccak_phase0","keccak_phase1","keccak_table","load_aux_tables","multi_keccak_phase0","multi_keccak_phase1","new","output_rlc","set_row","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","ABSORB_WIDTH_PER_ROW","ABSORB_WIDTH_PER_ROW_BYTES","BIT_COUNT","BIT_SIZE","KECCAK_WIDTH","KECCAK_WIDTH_IN_BITS","NUM_BITS_PER_BYTE","NUM_BITS_PER_WORD","NUM_BYTES_PER_WORD","NUM_BYTES_TO_ABSORB","NUM_BYTES_TO_SQUEEZE","NUM_ROUNDS","NUM_WORDS_TO_ABSORB","NUM_WORDS_TO_SQUEEZE","PartInfo","RATE","RATE_IN_BITS","WordParts","bits","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","constraint_builder","deref","deref","deref_mut","deref_mut","drop","drop","eth_types","expression","field_xor","fmt","fmt","from","from","get_absorb_positions","get_degree","get_num_bits_per_lookup","get_rotate_count","init","init","into","into","into_bits","new","pack","pack_part","pack_u64","pack_with_base","parts","rotate","rotate_left","rotate_rev","scatter","target_part_sizes","to_bytes","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unpack","vzip","vzip","BaseConstraintBuilder","borrow","borrow_mut","condition","constraints","default","deref","deref_mut","drop","from","init","into","max_degree","try_from","try_into","type_id","vzip","0","0","0","0","0","0","0","AccessList","Address","Block","Bytes","Field","H160","H256","H64","Hash","MAX","MAX","Signature","ToAddress","ToBigEndian","ToLittleEndian","ToScalar","ToWord","Transaction","U256","U64","Word","abs_diff","abs_diff","access_list","add","add","add","add","add_assign","add_assign","as_bits","as_bits","as_bits","as_bits","as_bits","as_bits","as_byte_slice","as_byte_slice","as_byte_slice","as_byte_slice","as_byte_slice","as_byte_slice","as_bytes","as_bytes","as_bytes","as_bytes_mut","as_bytes_mut","as_bytes_mut","as_fixed_bytes","as_fixed_bytes","as_fixed_bytes","as_fixed_bytes_mut","as_fixed_bytes_mut","as_fixed_bytes_mut","as_mut","as_mut","as_mut","as_mut_bits","as_mut_bits","as_mut_bits","as_mut_byte_slice","as_mut_byte_slice","as_mut_byte_slice","as_mut_ptr","as_mut_ptr","as_mut_ptr","as_mut_slice_of","as_mut_slice_of","as_mut_slice_of","as_ptr","as_ptr","as_ptr","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_slice_of","as_slice_of","as_slice_of","as_slice_of","as_u128","as_u32","as_u32","as_u64","as_u64","as_usize","as_usize","assign_from_slice","assign_from_slice","assign_from_slice","author","base_fee_per_gas","bit","bit","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","block_hash","block_number","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte","byte","chain_id","checked_add","checked_add","checked_div","checked_div","checked_mul","checked_mul","checked_neg","checked_neg","checked_pow","checked_pow","checked_rem","checked_rem","checked_sub","checked_sub","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","covers","covers","covers","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode_all","decode_all","decode_all","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","difficulty","div","div","div","div","div_assign","div_assign","div_mod","div_mod","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode_hex","encode_hex","encode_hex","encode_hex","encode_hex_upper","encode_hex_upper","encode_hex_upper","encode_hex_upper","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","exp10","exp10","extra_data","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_big_endian","from_big_endian","from_dec_str","from_dec_str","from_little_endian","from_little_endian","from_low_u64_be","from_low_u64_be","from_low_u64_be","from_low_u64_le","from_low_u64_le","from_low_u64_le","from_low_u64_ne","from_low_u64_ne","from_low_u64_ne","from_slice","from_slice","from_slice","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str_radix","from_str_radix","from_token","from_token","from_token","from_token","from_tokens","from_tokens","from_tokens","from_tokens","from_uint","from_uint","full_mul","gas","gas_limit","gas_price","gas_target","gas_used","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","index","index","index","index_mut","index_mut","index_mut","init","init","init","init","init","init","init","init","init","init","input","integer_sqrt","integer_sqrt","into","into","into","into","into","into","into","into","into","into","into_full_block","into_iter","into_iter","into_token","into_token","into_token","into_token","into_tokens","into_tokens","into_tokens","into_tokens","into_uint","into_uint","is_zero","is_zero","is_zero","is_zero","is_zero","leading_zeros","leading_zeros","len_bytes","len_bytes","len_bytes","length","length","length","length","length","length","length","length","logs_bloom","low_u128","low_u32","low_u32","low_u64","low_u64","max_encoded_len","max_encoded_len","max_encoded_len","max_fee_per_gas","max_priority_fee_per_gas","max_value","max_value","mix_hash","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","next_block_base_fee","nonce","nonce","not","not","number","one","one","other","other","overflowing_add","overflowing_add","overflowing_mul","overflowing_mul","overflowing_neg","overflowing_neg","overflowing_pow","overflowing_pow","overflowing_sub","overflowing_sub","param_type","param_type","param_type","param_type","param_type","parent_hash","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pow","pow","r","r","random","random","random","random_using","random_using","random_using","randomize","randomize","randomize","randomize_using","randomize_using","randomize_using","receipts_root","recover","recover_from","recover_from_mut","recovery_id","rem","rem","rem","rem","rem_assign","rem_assign","repeat_byte","repeat_byte","repeat_byte","rlp","rlp_append","rlp_append","rlp_append","rlp_append","rlp_append","rlp_append","s","s","saturating_add","saturating_add","saturating_mul","saturating_mul","saturating_sub","saturating_sub","seal_fields","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","shl","shl","shl","shl","shl_assign","shl_assign","shr","shr","shr","shr","shr_assign","shr_assign","size","state_root","sub","sub","sub","sub","sub_assign","sub_assign","time","timestamp","to","to_address","to_address","to_be_bytes","to_be_bytes","to_big_endian","to_big_endian","to_fixed_bytes","to_fixed_bytes","to_fixed_bytes","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_le_bytes","to_le_bytes","to_little_endian","to_little_endian","to_low_u64_be","to_low_u64_be","to_low_u64_be","to_low_u64_le","to_low_u64_le","to_low_u64_le","to_low_u64_ne","to_low_u64_ne","to_low_u64_ne","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_scalar","to_scalar","to_scalar","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_vec","to_vec","to_word","to_word","to_word","total_difficulty","trailing_zeros","trailing_zeros","transaction_index","transaction_type","transactions","transactions_root","try_as_bits","try_as_bits","try_as_bits","try_as_bits","try_as_bits","try_as_bits","try_as_mut_bits","try_as_mut_bits","try_as_mut_bits","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uncles","uncles_hash","using_encoded","using_encoded","using_encoded","v","v","value","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","zero","zero","zero","zero","zero","Expr","and","expr","expr_from_bytes","not","or","pow_of_two","select","sum","xor","expr","value","expr","value","expr","value","expr","value","value_word","expr","value","expr","value"],"q":["zkevm_keccak","","","","","","","zkevm_keccak::keccak_packed_multi","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zkevm_keccak::util","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zkevm_keccak::util::constraint_builder","","","","","","","","","","","","","","","","","zkevm_keccak::util::eth_types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zkevm_keccak::util::expression","","","","","","","","","","zkevm_keccak::util::expression::and","","zkevm_keccak::util::expression::not","","zkevm_keccak::util::expression::or","","zkevm_keccak::util::expression::select","","","zkevm_keccak::util::expression::sum","","zkevm_keccak::util::expression::xor",""],"d":["","Create an <code>Address</code> from a hex string.  Panics on invalid …","Implementation trait <code>Expr</code> for type able to be casted to u64","Keccak packed multi","Util Utility traits, functions used in the crate.","Create a <code>Word</code> from a hex string.  Panics on invalid input.","Create a <code>Word</code> to <code>Word</code> HashMap from pairs of hex strings.  …","KeccakConfig","KeccakRow","Keccak Table, used to verify keccak hashing from RLC’ed …","","","","","","","","","","","","","","","","","Construct a new KeccakTable","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The number of keccak_f’s that can be done in this circuit","","","","","","Byte array input as <code>RLC(reversed(input))</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","True when the row is enabled","Witness generation in <code>FirstPhase</code> for a keccak hash digest …","Computes and assigns the input RLC values (but not the …","","","Returns vector of KeccakRow and vector of hash digest …","Computes and assigns the input and output RLC values.","Return a new KeccakCircuitConfig","RLC of the hash result","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Description of which bits (positions) a part contains","","","Description of how a word is split into parts","The bit positions of the part","","","","","","","","","","","","","","","","Ethereum and Evm types used to deserialize responses from …","","Calculates a ^ b with a and b field elements","","","Returns the argument unchanged.","Returns the argument unchanged.","The words that absorb data","Get the degree of the circuit from the KECCAK_DEGREE env …","Returns how many bits we can process in a single lookup …","Gets the rotation count in parts","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts bytes into bits","Returns a description of how a word will be split into …","Pack bits in the range [0,BIT_SIZE[ into a sparse keccak …","Decodes the bits using the position data found in the part …","Pack bits stored in a u64 value into a sparse keccak word","Pack bits in the range [0,BIT_SIZE[ into a sparse keccak …","The parts of the word","Rotates a word that was split into parts to the right","Rotates bits left","Rotates a word that was split into parts to the left","Scatters a value into a packed word constant","Returns the size (in bits) of each part size when …","Packs bits into bytes","","","","","","","","","Unpack a sparse keccak word into bits in the range […","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Access list","","The block type returned from RPC calls. This is generic …","Wrapper type around Bytes to deserialize/serialize “0x”…","Trait used to reduce verbosity with the declaration of the …","Fixed-size uninterpreted hash type with 20 bytes (160 …","Fixed-size uninterpreted hash type with 32 bytes (256 …","","Ethereum Hash (256 bits).","Maximum value.","Maximum value.","An ECDSA signature","Trait used to convert a type to a <code>Address</code>.","Trait uset do convert a scalar value to a 32 byte array in …","Trait used to convert a scalar value to a 32 byte array in …","Trait used to define types that can be converted to a 256 …","Trait used to convert a type to a <code>Word</code>.","Details of a signed transaction","Little-endian large integer type 256-bit unsigned integer.","Little-endian large integer type Unsigned 64-bit integer.","Ethereum Word (256 bits).","Computes the absolute difference between self and other.","Computes the absolute difference between self and other.","","","","","","","","","","","","","","","","","","","","Extracts a byte slice containing the entire fixed hash.","Extracts a byte slice containing the entire fixed hash.","Extracts a byte slice containing the entire fixed hash.","Extracts a mutable byte slice containing the entire fixed …","Extracts a mutable byte slice containing the entire fixed …","Extracts a mutable byte slice containing the entire fixed …","Extracts a reference to the byte array containing the …","Extracts a reference to the byte array containing the …","Extracts a reference to the byte array containing the …","Extracts a reference to the byte array containing the …","Extracts a reference to the byte array containing the …","Extracts a reference to the byte array containing the …","","","","","","","","","","Returns a mutable raw pointer to the value.","Returns a mutable raw pointer to the value.","Returns a mutable raw pointer to the value.","","","","Returns a constant raw pointer to the value.","Returns a constant raw pointer to the value.","Returns a constant raw pointer to the value.","","","","","","","","","","","Conversion to u128 with overflow checking","Conversion to u32 with overflow checking","Conversion to u32 with overflow checking","Conversion to u64 with overflow checking","Conversion to u64 with overflow checking","Conversion to usize with overflow checking","Conversion to usize with overflow checking","Assign the bytes from the byte slice <code>src</code> to <code>self</code>.","Assign the bytes from the byte slice <code>src</code> to <code>self</code>.","Assign the bytes from the byte slice <code>src</code> to <code>self</code>.","Miner/author’s address. None if pending.","Base fee per unit of gas (if past London)","Return if specific bit is set.","Return if specific bit is set.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return the least number of bits needed to represent the …","Return the least number of bits needed to represent the …","","","","","","","","","","","","","","","","","Block hash. None when pending.","Block number. None when pending.","","","","","","","","","","","","","","","","","","","","","","Return specific byte.","Return specific byte.","","Checked addition. Returns <code>None</code> if overflow occurred.","Checked addition. Returns <code>None</code> if overflow occurred.","Checked division. Returns <code>None</code> if <code>other == 0</code>.","Checked division. Returns <code>None</code> if <code>other == 0</code>.","Checked multiplication. Returns <code>None</code> if overflow occurred.","Checked multiplication. Returns <code>None</code> if overflow occurred.","Checked negation. Returns <code>None</code> unless <code>self == 0</code>.","Checked negation. Returns <code>None</code> unless <code>self == 0</code>.","Checked exponentiation. Returns <code>None</code> if overflow occurred.","Checked exponentiation. Returns <code>None</code> if overflow occurred.","Checked modulus. Returns <code>None</code> if <code>other == 0</code>.","Checked modulus. Returns <code>None</code> if <code>other == 0</code>.","Checked subtraction. Returns <code>None</code> if overflow occurred.","Checked subtraction. Returns <code>None</code> if overflow occurred.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.","Returns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.","Returns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Difficulty","","","","","","","Returns a pair <code>(self / other, self % other)</code>.","Returns a pair <code>(self / other, self % other)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create <code>10**n</code> as this type.","Create <code>10**n</code> as this type.","Extra data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Constructs a hash type from the given bytes array of fixed …","Constructs a hash type from the given reference to the …","Constructs a hash type from the given reference to the …","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Constructs a hash type from the given reference to the …","Returns the argument unchanged.","","Constructs a hash type from the given bytes array of fixed …","Constructs a hash type from the given reference to the …","Constructs a hash type from the given reference to the …","","Constructs a hash type from the given bytes array of fixed …","Constructs a hash type from the given reference to the …","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Sender","Converts from big endian representation bytes in memory.","Converts from big endian representation bytes in memory.","Convert from a decimal string.","Convert from a decimal string.","Converts from little endian representation bytes in memory.","Converts from little endian representation bytes in memory.","Creates a new hash type from the given <code>u64</code> value.","Creates a new hash type from the given <code>u64</code> value.","Creates a new hash type from the given <code>u64</code> value.","Creates a new hash type from the given <code>u64</code> value.","Creates a new hash type from the given <code>u64</code> value.","Creates a new hash type from the given <code>u64</code> value.","Creates a new hash type from the given <code>u64</code> value.","Creates a new hash type from the given <code>u64</code> value.","Creates a new hash type from the given <code>u64</code> value.","Create a new fixed-hash from the given slice <code>src</code>.","Create a new fixed-hash from the given slice <code>src</code>.","Create a new fixed-hash from the given slice <code>src</code>.","Creates a hash type instance from the given string.","","","Creates a hash type instance from the given string.","Creates a hash type instance from the given string.","","","Converts a string slice in a given base to an integer. …","Converts a string slice in a given base to an integer. …","","","","","","","","","","","Multiplies two 256-bit integers to produce full 512-bit …","Gas amount","Gas Limit","Gas Price, null for Type 2 transactions","The target gas usage as per EIP-1559","Gas Used","","","","","","","","","","The transaction’s hash","Hash of the block","","","","","","","","","","","","","","","","","Input data","Compute the highest <code>n</code> such that <code>n * n &lt;= self</code>.","Compute the highest <code>n</code> such that <code>n * n &lt;= self</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts this block that only holds transaction hashes …","","","","","","","","","","","","","Returns <code>true</code> if no bits are set.","Whether this is zero.","Whether this is zero.","Returns <code>true</code> if no bits are set.","Returns <code>true</code> if no bits are set.","Returns the number of leading zeros in the binary …","Returns the number of leading zeros in the binary …","Returns the size of this hash in bytes.","Returns the size of this hash in bytes.","Returns the size of this hash in bytes.","","","","","","","","","Logs bloom","Low 2 words (u128)","Conversion to u32","Conversion to u32","Low word (u64)","Low word (u64)","","","","Represents the maximum amount that a user is willing to …","Represents the maximum tx fee that will go to the miner as …","The maximum value which can be inhabited by this type.","The maximum value which can be inhabited by this type.","Mix Hash","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The next block’s base fee, it is a function of parent …","The transaction’s nonce","Nonce","","","Block number. None if pending.","One (multiplicative identity) of this type.","One (multiplicative identity) of this type.","Captures unknown fields such as additional fields used by …","Captures unknown fields such as additional fields used by …","Addition which overflows and returns a flag if it does.","Addition which overflows and returns a flag if it does.","Multiply with overflow, returning a flag if it does.","Multiply with overflow, returning a flag if it does.","Negation with overflow.","Negation with overflow.","Fast exponentiation by squaring. Returns result and …","Fast exponentiation by squaring. Returns result and …","Subtraction which underflows and returns a flag if it does.","Subtraction which underflows and returns a flag if it does.","","","","","","Hash of the parent","","","","","","","Fast exponentiation by squaring …","Fast exponentiation by squaring …","ECDSA signature r","R value","Create a new hash with cryptographically random content.","Create a new hash with cryptographically random content.","Create a new hash with cryptographically random content.","Create a new hash with cryptographically random content …","Create a new hash with cryptographically random content …","Create a new hash with cryptographically random content …","Assign <code>self</code> to a cryptographically random value.","Assign <code>self</code> to a cryptographically random value.","Assign <code>self</code> to a cryptographically random value.","Assign <code>self</code> to a cryptographically random value using the …","Assign <code>self</code> to a cryptographically random value using the …","Assign <code>self</code> to a cryptographically random value using the …","Transactions receipts root hash","Recovers the Ethereum address which was used to sign the …","Recover the sender of the tx from signature","Recover the sender of the tx from signature and set the …","Retrieve the recovery ID.","","","","","","","Returns a new fixed hash where all bits are set to the …","Returns a new fixed hash where all bits are set to the …","Returns a new fixed hash where all bits are set to the …","","","","","","","","ECDSA signature s","S Value","Addition which saturates at the maximum value (Self::MAX).","Addition which saturates at the maximum value (Self::MAX).","Multiplication which saturates at the maximum value..","Multiplication which saturates at the maximum value..","Subtraction which saturates at zero.","Subtraction which saturates at zero.","Seal fields","","","","","","","","","","","","","","","","","","","","","","","Size in bytes","State root hash","","","","","","","Parse <code>Self::timestamp</code> into a <code>DateTime&lt;Utc&gt;</code>.","Timestamp","Recipient (None when contract creation)","Convert the type to a <code>Address</code>.","","Convert the value to a 32 byte array in big endian.","Encode the value as byte array in big endian.","Write to the slice in big-endian format.","Write to the slice in big-endian format.","Returns the inner bytes array.","Returns the inner bytes array.","Returns the inner bytes array.","","","","Convert the value to a 32 byte array in little endian.","Encode the value as byte array in little endian.","Write to the slice in little-endian format.","Write to the slice in little-endian format.","Returns the lowest 8 bytes interpreted as big-endian.","Returns the lowest 8 bytes interpreted as big-endian.","Returns the lowest 8 bytes interpreted as big-endian.","Returns the lowest 8 bytes interpreted as little-endian.","Returns the lowest 8 bytes interpreted as little-endian.","Returns the lowest 8 bytes interpreted as little-endian.","Returns the lowest 8 bytes interpreted as native-endian.","Returns the lowest 8 bytes interpreted as native-endian.","Returns the lowest 8 bytes interpreted as native-endian.","","","","","","","","","","","Convert the type to a scalar value.","","","","","","","","","","","Copies and serializes <code>self</code> into a new <code>Vec</code> with the …","Convert the type to a <code>Word</code>.","","","Total difficulty","Returns the number of trailing zeros in the binary …","Returns the number of trailing zeros in the binary …","Transaction Index. None when pending.","Transaction type, Some(2) for EIP-1559 transaction, …","Transactions","Transactions root hash","","","","","","","","","","","","","","","","","","","","","","","","Parses a raw signature which is expected to be 65 bytes …","","","","","","","","","","","","","","","","","","","","","Uncles’ hashes","Hash of the uncles","","","","ECDSA recovery id","V value","Transferred value","Verifies that signature on <code>message</code> was produced by <code>address</code>","","","","","","","","","","","Returns a new zero-initialized fixed hash.","Zero (additive identity) of this type.","Zero (additive identity) of this type.","Returns a new zero-initialized fixed hash.","Returns a new zero-initialized fixed hash.","Trait that implements functionality to get a constant …","Returns <code>1</code> when <code>expr[0] &amp;&amp; expr[1] &amp;&amp; ... == 1</code>, and returns …","Returns an expression for the type.","Given a bytes-representation of an expression, it computes …","Returns <code>1</code> when <code>b == 0</code>, and returns <code>0</code> otherwise. <code>b</code> needs to …","Returns <code>1</code> when <code>expr[0] || expr[1] || ... == 1</code>, and returns …","Returns 2**by as FieldExt","Returns <code>when_true</code> when <code>selector == 1</code>, and returns …","Returns the sum of the passed in cells","Returns <code>a ^ b</code>. <code>a</code> and <code>b</code> needs to be boolean","Returns an expression that evaluates to 1 only if all the …","Returns the product of all given values.","Returns an expression that represents the NOT of the given …","Returns a value that represents the NOT of the given value.","Returns an expression that evaluates to 1 if any …","Returns the value after passing all given values through …","Returns the <code>when_true</code> expression when the selector is …","Returns the <code>when_true</code> value when the selector is true, …","Returns the <code>when_true</code> word when selector is true, else …","Returns an expression for the sum of the list of …","Returns the sum of the given list of values within the …","Returns an expression that represents the XOR of the given …","Returns a value that represents the XOR of the given value."],"i":[0,0,0,0,0,0,0,0,0,0,2,0,0,14,15,2,14,15,2,2,14,15,2,14,15,2,15,14,15,2,14,15,2,14,15,2,14,14,15,2,14,15,2,0,0,0,14,15,2,15,14,15,2,15,0,0,2,2,0,0,2,15,2,14,15,2,14,15,2,14,15,2,14,15,2,14,15,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,26,27,26,27,26,27,26,27,0,26,27,26,27,26,27,0,0,0,26,27,26,27,0,0,0,0,26,27,26,27,0,27,0,0,0,0,27,0,0,0,0,0,0,26,27,26,27,26,27,26,27,0,26,27,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,36,33,34,37,38,44,40,0,0,0,0,0,0,0,0,0,33,34,0,0,0,0,0,0,0,0,0,0,33,34,43,33,33,34,34,33,34,36,33,34,37,38,40,36,33,34,37,38,40,36,37,38,36,37,38,36,37,38,36,37,38,36,37,38,36,37,38,36,37,38,36,37,38,36,37,38,36,37,38,36,33,34,37,38,40,36,37,38,40,33,33,34,33,34,33,34,36,37,38,45,45,33,34,36,36,33,34,37,37,38,38,36,36,33,34,37,37,38,38,36,36,33,34,37,37,38,38,36,36,33,34,37,37,38,38,33,34,36,36,33,34,37,37,38,38,36,36,33,34,37,37,38,38,43,43,36,33,34,37,38,43,44,40,40,45,46,36,33,34,37,38,43,44,40,45,46,33,34,43,33,34,33,34,33,34,33,34,33,34,33,34,33,34,36,33,34,37,38,43,44,40,45,46,36,33,34,37,38,43,44,40,45,46,36,33,34,37,38,40,36,37,38,36,36,33,33,33,33,34,34,37,37,37,37,38,38,38,38,43,44,44,40,40,46,33,37,38,33,37,38,33,37,38,36,33,34,37,38,43,44,40,45,36,33,34,37,38,43,44,40,40,45,46,36,33,34,37,38,43,44,40,45,46,36,33,34,37,38,43,44,40,45,46,45,33,33,34,34,33,34,33,34,36,33,34,37,38,43,44,40,45,46,36,33,33,34,37,37,38,38,44,40,40,46,36,37,38,40,36,37,38,40,36,33,34,37,38,43,44,40,40,40,40,45,46,33,34,45,36,36,36,36,33,33,33,33,34,34,34,34,37,37,37,37,38,38,38,38,43,44,40,40,40,45,46,46,36,36,36,36,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,37,37,37,37,37,38,38,38,38,38,43,44,44,40,40,40,40,40,45,45,46,43,33,34,33,34,33,34,36,37,38,36,37,38,36,37,38,36,37,38,36,33,34,37,38,40,46,33,34,33,37,38,40,33,37,38,40,36,38,33,43,45,43,45,45,36,33,34,37,38,43,44,40,46,43,45,36,37,38,36,37,38,36,33,34,37,38,43,44,40,45,46,43,33,34,36,33,34,37,38,43,44,40,45,46,45,40,40,33,37,38,40,33,37,38,40,36,38,36,33,34,37,38,33,34,36,37,38,36,33,34,37,38,44,40,46,45,33,33,34,33,34,33,37,38,43,43,33,34,45,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,33,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,34,34,45,43,45,33,34,45,33,34,43,45,33,34,33,34,33,34,33,34,33,34,33,34,37,38,40,45,36,33,34,37,38,40,33,34,43,46,36,37,38,36,37,38,36,37,38,36,37,38,45,46,43,43,46,33,33,34,34,33,34,36,37,38,43,36,33,34,37,38,44,43,46,33,34,33,34,33,34,45,36,33,34,37,38,43,44,40,45,46,33,33,34,34,33,34,33,33,34,34,33,34,45,45,33,33,34,34,33,34,45,45,43,93,33,94,33,33,34,36,37,38,33,37,38,95,33,33,34,36,37,38,36,37,38,36,37,38,36,33,34,37,38,43,44,40,45,46,96,83,33,36,33,34,37,38,40,46,40,46,97,83,86,45,33,34,43,43,45,45,36,33,34,37,38,40,36,37,38,36,33,33,33,33,33,34,37,38,43,44,40,45,46,46,36,33,34,37,38,43,44,40,45,46,36,33,34,37,38,43,44,40,45,46,45,45,33,37,38,43,46,43,46,36,33,34,37,38,43,44,40,45,46,36,33,34,37,38,0,0,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,[[[2,[1]],3]],[[3,[5,[4]],6,[7,[1]]],[[9,[8,1]]]],[[3,[5,[10]],6,1]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1]]],11],[[[14,[[0,[12,13]]]]],[[14,[[0,[12,13]]]]]],[15,15],[[[2,[12]]],[[2,[12]]]],[[]],[[]],[[]],[16,15],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6,[[17,[[14,[13]]]]]],[[[14,[[0,[18,13]]]],19],20],[[15,19],20],[[[2,[18]],19],20],[[]],[[]],[[]],[6,6],[6,6],[[],6],[[],6],[[],6],[[],6],0,[[]],[[]],[[]],0,[[17,17]],[[3,15,[7,[1]],17,6]],0,[[[2,[1]]],[[22,[21]]]],[[[23,[6]]]],[[3,15,24,[7,[1]],17]],[[16,11],[[2,[1]]]],0,[[[2,[1]],3,6,14]],[[]],[[]],[[]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],25],[[],25],[[],25],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[26,26],[27,27],[[]],[[]],0,[6],[6],[6],[6],[6],[6],0,0,[[1,1],1],[[26,19],20],[[27,19],20],[[]],[[]],[[],17],[[],6],[6,6],[[6,6],6],[[],6],[[],6],[[]],[[]],[[],[[17,[28]]]],[[6,6,29],27],[[],1],[26,30],[30,1],[6,1],0,[[17,6,6],17],[6],[[17,6,6],17],0,[6,[[17,[6]]]],0,[[]],[[]],[[],22],[[],22],[[],22],[[],22],[[],25],[[],25],[1],[[]],[[]],0,[[]],[[]],0,0,[[],[[32,[31]]]],[6],[6],[6],[[]],[[],6],[[]],0,[[],22],[[],22],[[],25],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[33,33],33],[[34,34],34],0,[33,33],[33,33],[34,34],[34,34],[[33,33]],[[34,34]],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[]],[[]],[[]],[[]],[[]],[[]],[36],[37],[38],[36],[37],[38],[36],[37],[38],[36],[37],[38],[36],[37],[38],[[],35],[[],35],[[],35],[[]],[[]],[[]],[36,28],[37,28],[38,28],[[],[[22,[39]]]],[[],[[22,[39]]]],[[],[[22,[39]]]],[36,28],[37,28],[38,28],[36],[33],[34],[37],[38],[40],[[],[[22,[39]]]],[[],[[22,[39]]]],[[],[[22,[39]]]],[[],[[22,[39]]]],[33,41],[33,42],[34,42],[33,30],[34,30],[33,6],[34,6],[36],[37],[38],0,0,[[33,6],29],[[34,6],29],[[36,36]],[[36,36]],[[33,33],33],[[34,34],34],[[37,37]],[[37,37]],[[38,38]],[[38,38]],[[36,36]],[[36,36]],[[33,33]],[[34,34]],[[37,37]],[[37,37]],[[38,38]],[[38,38]],[[36,36]],[[36,36]],[[33,33],33],[[34,34],34],[[37,37]],[[37,37]],[[38,38]],[[38,38]],[[36,36]],[[36,36]],[[33,33]],[[34,34]],[[37,37]],[[37,37]],[[38,38]],[[38,38]],[33,6],[34,6],[[36,36]],[[36,36]],[[33,33],33],[[34,34],34],[[37,37]],[[37,37]],[[38,38]],[[38,38]],[[36,36]],[[36,36]],[[33,33]],[[34,34]],[[37,37]],[[37,37]],[[38,38]],[[38,38]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[40],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[33,6],28],[[34,6],28],0,[[33,33],[[23,[33]]]],[[34,34],[[23,[34]]]],[[33,33],[[23,[33]]]],[[34,34],[[23,[34]]]],[[33,33],[[23,[33]]]],[[34,34],[[23,[34]]]],[33,[[23,[33]]]],[34,[[23,[34]]]],[[33,33],[[23,[33]]]],[[34,34],[[23,[34]]]],[[33,33],[[23,[33]]]],[[34,34],[[23,[34]]]],[[33,33],[[23,[33]]]],[[34,34],[[23,[34]]]],[36,36],[33,33],[34,34],[37,37],[38,38],[43,43],[44,44],[40,40],[45,45],[46,46],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[36,36],47],[[33,33],47],[[34,34],47],[[37,37],47],[[38,38],47],[[40,40],47],[[36,36],29],[[37,37],29],[[38,38],29],[[],[[22,[36,48]]]],[49,[[22,[36,50]]]],[51,[[22,[33,52]]]],[[],[[22,[33,48]]]],[49,[[22,[33,50]]]],[[],[[22,[33,53]]]],[[],[[22,[34,48]]]],[49,[[22,[34,50]]]],[[],[[22,[37,53]]]],[49,[[22,[37,50]]]],[[],[[22,[37,48]]]],[51,[[22,[37,52]]]],[[],[[22,[38,48]]]],[49,[[22,[38,50]]]],[[],[[22,[38,53]]]],[51,[[22,[38,52]]]],[49,[[22,[43,50]]]],[49,[[22,[44,50]]]],[[],[[22,[44,48]]]],[51,[[22,[40,52]]]],[[],[[22,[40,48]]]],[[],[[22,[46,48]]]],[[],[[22,[53]]]],[[],[[22,[53]]]],[[],[[22,[53]]]],[42,[[22,[53]]]],[42,[[22,[53]]]],[42,[[22,[53]]]],[42,[[22,[53]]]],[42,[[22,[53]]]],[42,[[22,[53]]]],[[],36],[[],33],[[],34],[[],37],[[],38],[[],43],[[],44],[[],40],[[],45],[6],[6],[6],[6],[6],[6],[6],[6],[40],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[[],[[22,[36]]]],[[],[[22,[33]]]],[[],[[22,[34]]]],[[],[[22,[37]]]],[[],[[22,[38]]]],[[],[[22,[43]]]],[[],[[22,[44]]]],[[],[[22,[40]]]],[[],[[22,[45]]]],[[],[[22,[46]]]],0,[33,33],[33,33],[34,34],[34,34],[33],[34],[[33,33]],[[34,34]],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[[36,54]],[[33,54]],[33,[[17,[28,55]]]],[[34,54]],[37,[[17,[28,55]]]],[[37,54]],[38,[[17,[28,55]]]],[[38,54]],[[44,54]],[[40,54]],[40,[[17,[28,55]]]],[[46,54]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[36,36],29],[[33,33],29],[[34,34],29],[[37,37],29],[[38,38],29],[[43,43],29],[[44,44],29],[[40,56],29],[40,29],[[40,40],29],[[40,17],29],[[45,45],29],[[46,46],29],[6,33],[6,34],0,[[36,19],[[22,[57]]]],[[36,19],[[22,[57]]]],[[36,19],[[22,[57]]]],[[36,19],[[22,[57]]]],[[33,19],[[22,[57]]]],[[33,19],[[22,[57]]]],[[33,19],[[22,[57]]]],[[33,19],[[22,[57]]]],[[34,19],[[22,[57]]]],[[34,19],[[22,[57]]]],[[34,19],[[22,[57]]]],[[34,19],[[22,[57]]]],[[37,19],[[22,[57]]]],[[37,19],[[22,[57]]]],[[37,19],[[22,[57]]]],[[37,19],[[22,[57]]]],[[38,19],[[22,[57]]]],[[38,19],[[22,[57]]]],[[38,19],[[22,[57]]]],[[38,19],[[22,[57]]]],[[43,19],[[22,[57]]]],[[44,19],[[22,[57]]]],[[40,19],[[22,[57]]]],[[40,19],[[22,[57]]]],[[40,19],[[22,[57]]]],[[45,19],[[22,[57]]]],[[46,19],[[22,[57]]]],[[46,19],[[22,[57]]]],[[]],[[],36],[[],36],[[],36],[58,33],[28,33],[[]],[59,33],[60,33],[61,33],[62,33],[63,33],[64,33],[[],33],[41,33],[33,33],[65,33],[[],33],[[],33],[30,33],[66,33],[6,33],[42,33],[67,33],[68,33],[[],34],[65,34],[28,34],[63,34],[42,34],[68,34],[30,34],[62,34],[6,34],[[]],[[],34],[59,34],[[],34],[64,34],[67,34],[34,34],[[],37],[[]],[38,37],[[],37],[[],37],[[],38],[37,38],[[],38],[[],38],[[]],[[]],[[[17,[69,55]]],44],[[]],[[]],[56,40],[[],40],[[],40],[[[17,[28,55]]],40],[[[45,[43]]],[[45,[38]]]],[[]],[[]],0,[[],33],[[],34],[62,[[22,[33,70]]]],[62,[[22,[34,70]]]],[[],33],[[],34],[30,36],[30,37],[30,38],[30,36],[30,37],[30,38],[30,36],[30,37],[30,38],[[],36],[[],37],[[],38],[62,[[22,[36,71]]]],[62,[[22,[33]]]],[62,[[22,[34]]]],[62,[[22,[37,71]]]],[62,[[22,[38,71]]]],[62,[[22,[40]]]],[62,[[22,[46]]]],[[62,42],[[22,[33,72]]]],[[62,42],[[22,[34,72]]]],[73,[[22,[33,74]]]],[73,[[22,[37,74]]]],[73,[[22,[38,74]]]],[73,[[22,[40,74]]]],[[[17,[73,55]]],[[22,[74]]]],[[[17,[73,55]]],[[22,[74]]]],[[[17,[73,55]]],[[22,[74]]]],[[[17,[73,55]]],[[22,[74]]]],[34,36],[33,38],[[33,33],75],0,0,0,[45,33],0,[36],[33],[34],[37],[38],[43,38],[44],[40],[46],0,0,[36],[37],[38],[36],[37],[38],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],0,[33,33],[34,34],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[45,[38]],[17,[43,55]]],[[45,[43]]]],[40],[40],[33,73],[37,73],[38,73],[40,73],[[],[[17,[73,55]]]],[[],[[17,[73,55]]]],[[],[[17,[73,55]]]],[[],[[17,[73,55]]]],[36,34],[38,33],[36,29],[33,29],[34,29],[37,29],[38,29],[33,42],[34,42],[[],6],[[],6],[[],6],[36,6],[33,6],[34,6],[37,6],[38,6],[44,6],[40,6],[46,6],0,[33,41],[33,42],[34,42],[33,30],[34,30],[[],6],[[],6],[[],6],0,0,[[],33],[[],34],0,[[33,67],33],[[33,30],33],[[33,42],33],[[33,59],33],[[33,42],33],[[33,28],33],[[33,59],33],[[33,67],33],[[33,68],33],[[33,59],33],[[33,30],33],[[33,33],33],[[33,64],33],[[33,63],33],[[33,33],33],[[33,63],33],[[33,65],33],[[33,28],33],[[33,68],33],[[33,33],33],[[33,68],33],[[33,64],33],[[33,30],33],[[33,42],33],[[33,6],33],[[33,6],33],[[33,28],33],[[33,64],33],[[33,65],33],[[33,65],33],[[33,30],33],[[33,67],33],[[33,63],33],[[33,68],33],[[33,59],33],[[33,63],33],[[33,64],33],[[33,28],33],[[33,33],33],[[33,6],33],[[33,6],33],[[33,67],33],[[33,42],33],[[33,65],33],[[34,68],34],[[34,64],34],[[34,28],34],[[34,34],34],[[34,34],34],[[34,59],34],[[34,28],34],[[34,64],34],[[34,65],34],[[34,68],34],[[34,65],34],[[34,67],34],[[34,65],34],[[34,42],34],[[34,6],34],[[34,6],34],[[34,63],34],[[34,30],34],[[34,30],34],[[34,42],34],[[34,34],34],[[34,6],34],[[34,28],34],[[34,59],34],[[34,42],34],[[34,59],34],[[34,68],34],[[34,64],34],[[34,63],34],[[34,63],34],[[34,63],34],[[34,65],34],[[34,68],34],[[34,28],34],[[34,67],34],[[34,6],34],[[34,67],34],[[34,30],34],[[34,59],34],[[34,67],34],[[34,34],34],[[34,30],34],[[34,42],34],[[34,64],34],[[33,59]],[[33,65]],[[33,64]],[[33,33]],[[33,30]],[[33,42]],[[33,6]],[[33,68]],[[33,63]],[[33,67]],[[33,28]],[[34,42]],[[34,68]],[[34,64]],[[34,28]],[[34,67]],[[34,30]],[[34,34]],[[34,63]],[[34,6]],[[34,59]],[[34,65]],[45,[[23,[33]]]],0,0,[33,33],[34,34],0,[[],33],[[],34],0,0,[[33,33]],[[34,34]],[[33,33]],[[34,34]],[33],[34],[[33,33]],[[34,34]],[[33,33]],[[34,34]],[[],76],[[],76],[[],76],[[],76],[[],76],0,[[36,36],[[23,[47]]]],[[33,33],[[23,[47]]]],[[34,34],[[23,[47]]]],[[37,37],[[23,[47]]]],[[38,38],[[23,[47]]]],[[40,40],[[23,[47]]]],[[33,33],33],[[34,34],34],0,0,[[],36],[[],37],[[],38],[[],36],[[],37],[[],38],[36],[37],[38],[36],[37],[38],0,[46,[[22,[37,77]]]],[43,[[22,[37,77]]]],[43,[[22,[37,77]]]],[46,[[22,[78,77]]]],[33,33],[33,33],[34,34],[34,34],[33],[34],[28,36],[28,37],[28,38],[43,40],[[36,79]],[[33,79]],[[34,79]],[[37,79]],[[38,79]],[[44,79]],0,0,[[33,33],33],[[34,34],34],[[33,33],33],[[34,34],34],[[33,33],33],[[34,34],34],0,[36,22],[33,22],[34,22],[37,22],[38,22],[43,22],[44,22],[40,22],[45,22],[46,22],[33,33],[33,33],[34,34],[34,34],[33],[34],[33,33],[33,33],[34,34],[34,34],[33],[34],0,0,[33,33],[33,33],[34,34],[34,34],[[33,33]],[[34,34]],[45,[[22,[[81,[80]],82]]]],0,0,[[],83],[33,83],[[]],[33],[33],[34],[36],[37],[38],[[],[[17,[28,55]]]],[[],[[17,[28,55]]]],[[],[[17,[28,55]]]],[[]],[33],[33],[34],[36,30],[37,30],[38,30],[36,30],[37,30],[38,30],[36,30],[37,30],[38,30],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],23],[83,[[23,[1]]]],[33,[[23,[1]]]],[[],84],[[],84],[[],84],[[],84],[[],84],[[],84],[[],84],[40,[[17,[28,55]]]],[46,[[17,[28,55]]]],[[],85],[83,85],[86,85],0,[33,42],[34,42],0,0,0,0,[[],[[22,[35,87]]]],[[],[[22,[35,87]]]],[[],[[22,[35,87]]]],[[],[[22,[35,87]]]],[[],[[22,[35,87]]]],[[],[[22,[35,87]]]],[[],[[22,[35,87]]]],[[],[[22,[35,87]]]],[[],[[22,[35,87]]]],[[],22],[88,[[22,[33]]]],[[],22],[89,[[22,[33]]]],[75,[[22,[33,90]]]],[75,[[22,[33,90]]]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],[[22,[46]]]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],0,0,[33],[37],[38],0,0,0,[46,[[22,[77]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],36],[[],33],[[],34],[[],37],[[],38],0,0,[[],91],[[],[[91,[13]]]],0,0,[6,13],0,0,0,[24,[[91,[13]]]],[[[17,[13]]],13],[[[92,[13]]],[[91,[13]]]],[13,13],[24,[[91,[13]]]],[[[17,[13]]],13],[[[91,[13]],[91,[13]],[91,[13]]],[[91,[13]]]],[[13,13,13],13],[13],[24,[[91,[13]]]],[[],13],[[[92,[13]],[92,[13]]],[[91,[13]]]],[[13,13],13]],"p":[[8,"Field"],[3,"KeccakCircuitConfig"],[3,"Region"],[3,"Advice"],[3,"Column"],[15,"usize"],[3,"Value"],[4,"Assigned"],[3,"AssignedCell"],[3,"Fixed"],[3,"Challenge"],[8,"Clone"],[8,"FieldExt"],[3,"KeccakRow"],[3,"KeccakTable"],[3,"ConstraintSystem"],[3,"Vec"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[4,"Error"],[4,"Result"],[4,"Option"],[8,"IntoIterator"],[3,"TypeId"],[3,"PartInfo"],[3,"WordParts"],[15,"u8"],[15,"bool"],[15,"u64"],[8,"Default"],[3,"BaseConstraintBuilder"],[3,"U256"],[3,"U64"],[3,"BitSlice"],[3,"H64"],[3,"H160"],[3,"H256"],[4,"Error"],[3,"Bytes"],[15,"u128"],[15,"u32"],[3,"Transaction"],[3,"AccessList"],[3,"Block"],[3,"Signature"],[4,"Ordering"],[4,"DecodeError"],[3,"Rlp"],[4,"DecoderError"],[8,"AsRef"],[4,"AbiError"],[3,"Error"],[8,"BufMut"],[3,"Global"],[3,"Bytes"],[3,"Error"],[3,"U128"],[15,"isize"],[4,"Chain"],[4,"Numeric"],[15,"str"],[15,"i64"],[15,"i16"],[15,"u16"],[15,"i128"],[15,"i32"],[15,"i8"],[3,"AccessListItem"],[4,"FromDecStrErr"],[4,"FromHexError"],[3,"FromStrRadixErr"],[4,"Token"],[3,"InvalidOutputType"],[3,"U512"],[4,"ParamType"],[4,"SignatureError"],[3,"Id"],[3,"RlpStream"],[3,"Utc"],[3,"DateTime"],[4,"TimeError"],[6,"Address"],[3,"String"],[6,"Word"],[6,"Hash"],[4,"BitSpanError"],[4,"StringifiedNumeric"],[3,"I256"],[4,"Error"],[4,"Expression"],[8,"Expr"],[8,"ToAddress"],[8,"ToBigEndian"],[8,"ToLittleEndian"],[8,"ToScalar"],[8,"ToWord"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
